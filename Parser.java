//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "Parser.y"
	import java.io.*;
	import java.util.*;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IDENTIFIER=257;
public final static short CONSTANT=258;
public final static short STRING_LITERAL=259;
public final static short SIZEOF=260;
public final static short PTR_OP=261;
public final static short INC_OP=262;
public final static short DEC_OP=263;
public final static short LEFT_OP=264;
public final static short RIGHT_OP=265;
public final static short LE_OP=266;
public final static short GE_OP=267;
public final static short EQ_OP=268;
public final static short NE_OP=269;
public final static short AND_OP=270;
public final static short OR_OP=271;
public final static short MUL_ASSIGN=272;
public final static short DIV_ASSIGN=273;
public final static short MOD_ASSIGN=274;
public final static short ADD_ASSIGN=275;
public final static short SUB_ASSIGN=276;
public final static short LEFT_ASSIGN=277;
public final static short RIGHT_ASSIGN=278;
public final static short AND_ASSIGN=279;
public final static short XOR_ASSIGN=280;
public final static short OR_ASSIGN=281;
public final static short TYPE_NAME=282;
public final static short TYPEDEF=283;
public final static short EXTERN=284;
public final static short STATIC=285;
public final static short AUTO=286;
public final static short REGISTER=287;
public final static short CHAR=288;
public final static short SHORT=289;
public final static short INT=290;
public final static short LONG=291;
public final static short SIGNED=292;
public final static short UNSIGNED=293;
public final static short FLOAT=294;
public final static short DOUBLE=295;
public final static short CONST=296;
public final static short VOLATILE=297;
public final static short VOID=298;
public final static short STRUCT=299;
public final static short UNION=300;
public final static short ENUM=301;
public final static short ELLIPSIS=302;
public final static short VAR=303;
public final static short PVAL=304;
public final static short BMSCR=305;
public final static short PREFSTR=306;
public final static short PEXINFO=307;
public final static short NULLPTR=308;
public final static short STR=309;
public final static short SPTR=310;
public final static short ARRAY=311;
public final static short GOSUB=312;
public final static short CASE=313;
public final static short DEFAULT=314;
public final static short IF=315;
public final static short ELSE=316;
public final static short SWITCH=317;
public final static short WHILE=318;
public final static short DO=319;
public final static short FOR=320;
public final static short GOTO=321;
public final static short CONTINUE=322;
public final static short BREAK=323;
public final static short RETURN=324;
public final static short NEWLINE=325;
public final static short LOWER_THAN_ELSE=326;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    1,    1,    3,    3,    4,    4,    6,
    6,    6,    6,    2,    2,    2,    2,    2,    2,    2,
    5,    5,    5,    5,    5,    5,    5,    5,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   16,   16,
   16,   18,   18,   19,   19,   19,   19,   19,   19,   20,
   20,   22,   22,   22,   22,   23,   23,   23,   24,   24,
   24,   25,   25,   25,   25,   25,   26,   26,   26,   27,
   27,   28,   28,   29,   29,   30,   30,   31,   31,   32,
   32,   17,   17,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   14,   14,   34,   35,   35,   36,
   36,   36,   36,   37,   37,   39,   39,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,   42,   42,
   42,   44,   44,   45,   45,   46,   47,   47,   47,   47,
   48,   48,   49,   49,   49,   43,   43,   43,   50,   50,
   51,   51,   38,   38,   40,   52,   52,   52,   52,   52,
   52,   52,   55,   55,   53,   53,   56,   56,   57,   57,
   57,   54,   54,   21,   21,   58,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   41,   41,   41,   60,   60,
    8,    9,    9,    9,    9,   62,   62,   61,   61,   10,
   10,   11,   11,   12,   12,   12,   12,   13,   13,   13,
   13,   13,   13,   13,   13,   13,
};
final static short yylen[] = {                            2,
    1,    2,    1,    1,    0,    3,    2,    2,    1,    4,
    3,    2,    1,    2,    2,    2,    1,    2,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    3,    1,    4,
    3,    2,    4,    3,    4,    2,    2,    2,    1,    3,
    2,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    4,    1,    3,    3,    3,    1,    3,    3,    1,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    1,    3,    1,    3,    1,    3,    1,    3,    1,
    5,    1,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    1,    1,    2,    1,
    2,    1,    2,    1,    3,    1,    3,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    5,    4,
    2,    1,    1,    1,    2,    2,    2,    1,    2,    1,
    1,    3,    1,    2,    3,    4,    5,    2,    1,    3,
    1,    3,    1,    1,    1,    1,    3,    4,    3,    4,
    4,    3,    1,    2,    1,    3,    1,    3,    2,    2,
    1,    1,    3,    1,    2,    1,    3,    2,    3,    3,
    4,    2,    3,    3,    4,    1,    3,    4,    1,    3,
    2,    3,    4,    4,    5,    1,    2,    1,    2,    1,
    2,    5,    7,    5,    6,    6,    7,    3,    5,    3,
    5,    1,    2,    1,    1,    2,
};
final static short yydefred[] = {                         0,
   24,   22,   23,  119,  109,  110,  111,  112,  115,  116,
  113,  114,  108,  132,  133,    0,  120,  121,  122,  123,
  124,  125,  126,  127,  128,    0,   26,    0,   25,    0,
    0,    0,    0,    0,  214,    0,    4,    0,    0,   44,
    0,   46,   47,   48,   49,    0,    0,    1,    3,    0,
   29,   21,    0,    0,    0,    0,   17,    0,    0,    0,
    0,   95,    0,    0,   52,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   82,  117,  118,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   27,
   45,    0,    0,    0,  153,  154,    0,    0,    0,    0,
    0,  191,    0,    2,   20,    0,    0,   14,   15,   16,
   18,   19,    0,  201,    0,   37,   38,    0,    0,    0,
   36,    0,   39,   85,   86,   87,   88,   89,   90,   91,
   92,   93,   94,   84,    0,   50,   43,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  149,    0,  210,    0,    0,    0,    0,    0,  208,
    0,    6,    0,    0,  137,   28,    0,  139,    0,    0,
  175,    0,  192,  198,    0,  196,    0,    0,    0,    0,
    0,   11,   96,    0,   31,    0,   39,    0,   34,    0,
   83,   53,   54,   55,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  134,    0,    0,    0,    0,  146,    0,    0,
    0,    0,    0,    0,    8,   51,  182,    0,    0,    0,
    0,  167,    0,  178,   97,    0,    0,    0,  101,  156,
    0,    0,  104,    0,    0,  103,  193,  199,  194,  197,
    0,   10,   35,   33,   30,   40,    0,    0,  130,  135,
    0,    0,    0,  141,  147,  152,  150,  211,    0,  204,
    0,    0,    0,  209,    0,  169,  170,  183,    0,  177,
  179,  184,    0,  180,    0,    0,    0,    0,    0,    0,
  195,   81,  129,  144,    0,    0,    0,  205,  206,    0,
  166,  168,  185,  181,  157,  105,    0,  186,  107,  172,
  162,    0,    0,  159,    0,  145,  142,  203,  207,  189,
    0,  160,    0,  161,  158,    0,  187,  173,  188,  190,
};
final static short yydgoto[] = {                         47,
   48,   49,   50,  172,   51,   52,   53,   54,   55,   56,
   57,   58,   59,   60,   61,  122,   62,   63,   64,   65,
   99,   66,   67,   68,   69,   70,   71,   72,   73,   74,
   75,   76,  135,  246,  186,  239,  252,  188,  253,  254,
  319,   77,   78,   79,  222,  223,  224,  273,  274,  161,
  162,  255,  240,  323,    0,  241,  242,  243,  182,  331,
  189,  190,
};
final static short yysindex[] = {                      6226,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -118,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -26,    0,   -7,    0,   16,
 7271,   26,  -25, 8688,    0, 8688,    0, -197, 8174,    0,
 -172,    0,    0,    0,    0, -232, 6226,    0,    0, -200,
    0,    0,  -31, -196, -187, -182,    0, -167, -154,  -44,
 7374,    0,  -59, 8688,    0,   11,   27, -113,  -30, -101,
  115,   79,   54,  -78,  -60,    0,    0,    0, -109,   75,
  -48,  168,  -19, 8688, 8688,  -94, 8688,  183,  -15,    0,
    0,  187,  187,  359,    0,    0,  702,   20,  199, 1364,
   -3,    0, 6665,    0,    0,  197, 1394,    0,    0,    0,
    0,    0, 8688,    0,  -14,    0,    0, 7881, 8688,  -11,
    0,  204,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8688,    0,    0, 8688, 8688, 8688,
 8688, 8688, 8688, 8688, 8688, 8688, 8688, 8688, 8688, 8688,
 8688, 8688, 8688, 8688, 8688, 8688,  120, 1364,  -48,  188,
  -17,    0,  209,    0,   34,   39,  212, 8688,  211,    0,
 8688,    0,  359, 1364,    0,    0, 8688,    0, 1295, 8332,
    0,   29,    0,    0,  702,    0,  -22, 1364, 6961, 6754,
 1394,    0,    0,  359,    0,   45,    0,  -16,    0, 8688,
    0,    0,    0,    0,   11,   11,   27,   27, -113, -113,
 -113, -113,  -30,  -30, -101,  115,   79,   54,  -78,    7,
 1364, 1070,    0,  -29,   -6, 8688,  -48,    0,    4, 7271,
 7271, 8688, 8396,   10,    0,    0,    0, 1364,  -28,  213,
  225,    0,  214,    0,    0,  163,  640, 8466,    0,    0,
  -22,  226,    0,  196,   31,    0,    0,    0,    0,    0,
 7069,    0,    0,    0,    0,    0, 8688, 1789,    0,    0,
 8688,  215,  227,    0,    0,    0,    0,    0,  -42,    0,
   46, 7271,   51,    0,  933,    0,    0,    0,  737,    0,
    0,    0,  231,    0,  182,  235,  -22, 8533,  571, 8624,
    0,    0,    0,    0, 8688,  -29, 7271,    0,    0, 7271,
    0,    0,    0,    0,    0,    0, 8533,    0,    0,    0,
    0,  240,  116,    0,  189,    0,    0,    0,    0,    0,
   -4,    0,   30,    0,    0, 8236,    0,    0,    0,    0,
};
final static short yyrindex[] = {                       284,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 5931,
    0,    0,    0, 7678,    0, 7781,    0,    0,    0,    0,
 8760,    0,    0,    0,    0,    0,  284,    0,    0,    0,
    0,    0, 2604,    0,    0,    0,    0,    0,    0, 6338,
 8072,    0, 5862,    0,    0, 4776, 2673, 2966, 5207, 3035,
   70,  139,  432,  501, 3328,    0,    0,    0,    0,  794,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  863, 1156,  -37,    0,    0, 6416,    0,    0,  -34,
  245,    0,    0,    0,    0, 1225,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1518,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1587,    0,    0,   -2,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 6023,  -32,    0,    0,    0,    0,    0,    0,
    0,  118,    0,    0, 6294,    0, 7163, 7476,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 7974,
    0,    0,    0,    0, 4845, 5138, 3397, 3690, 3759, 4052,
 4121, 4414, 5500, 5569, 4483, 1880, 1949, 2242, 2311,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 7579,  125,    0,
  256,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6867,    0, 6454, 6543,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1441, 1819,    0,    0,    0,    0,    0,    1,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  251,  322,    0, -142,  -39,  -82, 8853,    0,    0,  -33,
    0,    0,  128, 1171,    0,  185,  -51, 8964,    0,  -41,
    0,   49,   62,   -1,   58,  164,  165,  177,  200,  201,
    0, -130,    0,  -61,  167,  -84,    0,  -18,   87, -204,
 -268,    0,    0,    0,  134, -177,  -24,    0,   66,  263,
  159,    0, -225,    0,    0,    0,  135,  -97,    0,    0,
  233,    0,
};
final static int YYTABLESIZE=9269;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        113,
  202,  134,  156,  181,   81,  140,  140,  138,  138,  123,
  251,  285,  107,  158,  101,   83,   89,  251,  187,  272,
  100,  293,  137,  140,  192,  138,  227,  113,  271,  147,
  235,  148,   84,  202,  286,  202,  179,  227,  202,  336,
  202,  151,  202,  202,  270,  202,  296,  140,  330,  245,
  113,  263,  138,  168,  173,   85,  140,  139,  138,   94,
  176,  193,  180,  113,  267,   87,  197,  340,  247,  141,
  299,  142,  175,  322,  230,  178,  265,  113,  100,  231,
  296,  100,  113,  201,  102,  264,  308,  180,  200,  113,
  270,  310,  103,  101,  113,  245,  202,  203,  204,  100,
  249,  272,   72,  256,   72,  187,   72,  228,  262,   72,
   72,   72,   72,   72,   72,   72,   72,  245,  275,  248,
  337,  300,  151,  202,  105,  202,  202,   72,  108,   72,
   72,   72,   72,  173,  233,  236,  302,  109,   80,  100,
  245,  287,  110,  209,  210,  211,  212,  157,  266,  175,
  143,  144,  151,  249,  173,  100,  334,  111,  176,  333,
   72,  176,   72,   72,  276,  171,  149,  150,  171,  245,
  112,   74,  152,   74,  245,   74,   74,  153,   74,   74,
   74,   74,   74,   74,   74,   74,  295,  114,  121,  205,
  206,  154,   72,   72,   72,   72,   74,  159,   74,   74,
   74,   74,  100,  100,  207,  208,  213,  214,  160,  304,
  155,  163,  124,  125,  126,  127,  128,  129,  130,  131,
  132,  133,  140,  167,  138,  106,  169,  250,  250,   74,
  113,   74,   82,   88,  250,  145,  146,  164,  325,  177,
  191,  170,  221,  326,  194,  199,  318,  200,  226,  100,
  229,  232,  234,  288,  290,  291,  298,  202,  202,  202,
  278,   74,   74,   74,   74,  318,  284,   26,  289,  297,
  306,  313,  305,  307,  314,  315,   33,   34,   35,   36,
  332,  335,  202,    5,  318,  174,  338,    7,  202,  202,
  202,  202,  202,  202,  202,  202,  165,  104,  202,  202,
  202,  202,  196,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  215,  202,  216,  202,  202,  202,
  202,  202,  202,  202,  202,  202,   72,   72,   72,  217,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   86,  218,  268,  219,  260,   72,   72,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,  327,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   72,  316,   72,  277,   72,   72,   72,   72,
   72,   72,   72,   72,   72,   74,   74,   74,  171,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,  225,  261,  312,  184,    0,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
    0,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,    0,   74,    0,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   76,    0,   76,    0,   76,   76,
    0,   76,   76,   76,   76,   76,   76,   76,   76,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   76,
    0,   76,   76,   76,   76,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  258,  184,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   76,    0,   76,   76,    0,    0,    0,    0,
    0,    0,    0,   78,    0,   78,    0,   78,   78,    0,
   78,   78,   78,   78,   78,   78,   78,   78,    0,    0,
    0,  279,  280,    0,   76,    0,   76,   76,   78,    0,
   78,   78,   78,   78,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  258,    0,    0,    0,    0,    0,    0,    0,
    0,   78,    0,   78,   78,    0,    0,    0,    0,    0,
    0,    0,    0,  309,    0,    0,    0,    0,    0,    0,
    0,  321,    0,    0,    0,    1,    2,    3,    0,    0,
    0,    0,    0,   78,   78,   78,   78,    0,  328,    0,
    0,  329,    0,    0,    0,    0,    0,    0,    0,    0,
    4,    0,    0,    0,    0,    0,    5,    6,    7,    8,
    9,   10,   11,   12,    0,    0,   13,   14,   15,   16,
    0,   17,   18,   19,   20,   21,   22,   23,   24,   25,
    0,   27,    0,    0,    0,   29,   90,    0,    0,    0,
  292,    0,    0,    0,    0,    0,    0,    0,   76,   76,
   76,    0,   76,   76,   76,   76,   76,   76,   76,   76,
   76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
   76,   76,   76,   76,    0,    0,    0,    0,    0,   76,
   76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
   76,   76,   76,    0,   76,   76,   76,   76,   76,   76,
   76,   76,   76,   76,   76,  107,   76,    0,   76,   76,
   76,   76,   76,   76,   76,   76,   76,   78,   78,   78,
    0,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    0,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,   78,    0,    0,    0,    0,    0,   78,   78,
   78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
   78,   78,    0,   78,   78,   78,   78,   78,   78,   78,
   78,   78,   78,   78,    0,   78,    0,   78,   78,   78,
   78,   78,   78,   78,   78,   78,  148,  320,  148,    0,
  148,  148,    0,  148,  148,  148,  148,  148,  148,  148,
  148,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  148,    4,  148,  148,  148,  148,    0,    5,    6,
    7,    8,    9,   10,   11,   12,   95,   96,   13,   14,
   15,   16,    0,   17,   18,   19,   20,   21,   22,   23,
   24,   25,    0,    0,  148,    0,  148,  148,    0,    0,
    0,    0,    0,    0,    0,  213,    0,  213,    0,  213,
  213,    0,  213,  213,  213,  213,    0,  213,  213,  213,
    0,    0,    0,    0,    0,    0,    0,  148,  148,  148,
  213,    4,  213,  213,  213,  213,    0,    5,    6,    7,
    8,    9,   10,   11,   12,   95,   96,   13,   14,   15,
   16,    0,   17,   18,   19,   20,   21,   22,   23,   24,
   25,    0,    0,  213,    0,  213,  213,    0,  106,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  285,  237,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    4,    0,  213,  213,  213,  213,    5,
    6,    7,    8,    9,   10,   11,   12,   95,   96,   13,
   14,   15,   16,    0,   17,   18,   19,   20,   21,   22,
   23,   24,   25,    0,    0,    0,    0,    0,    4,    0,
    0,    0,    0,  180,    5,    6,    7,    8,    9,   10,
   11,   12,   95,   96,   13,   14,   15,   16,  311,   17,
   18,   19,   20,   21,   22,   23,   24,   25,    0,    0,
  148,  148,  148,    0,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,    0,    0,    0,    0,
    0,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,    0,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,    0,  148,    0,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  213,
  213,  213,    0,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,    0,    0,    0,    0,    0,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,    0,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,    0,  213,    0,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  216,  250,
  216,    0,  216,  216,  269,  216,  216,  216,  216,    0,
  216,  216,  216,    0,   92,    0,   93,    0,    0,   98,
    0,    0,    0,  216,    4,  216,  216,  216,  216,    0,
    5,    6,    7,    8,    9,   10,   11,   12,   95,   96,
   13,   14,   15,   16,    0,   17,   18,   19,   20,   21,
   22,   23,   24,   25,    0,    0,  216,    0,  216,  216,
    0,    0,    0,    0,  165,  166,    0,   12,    0,   12,
    0,   12,   12,    0,   12,   12,   12,   12,    0,   12,
   12,   12,    0,    0,    0,    0,    0,    0,  216,  216,
  216,  216,   12,    0,   12,   12,   12,   12,   98,  198,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   12,    0,   12,   12,    0,
    0,    0,    0,    0,    0,    0,  220,    0,    0,    0,
    0,    0,    0,    0,  179,  237,    0,    0,    0,    0,
    0,   98,    0,    0,    0,    0,    0,   12,   12,   12,
   12,    4,    0,    0,    0,    0,    0,    5,    6,    7,
    8,    9,   10,   11,   12,   95,   96,   13,   14,   15,
   16,    0,   17,   18,   19,   20,   21,   22,   23,   24,
   25,    0,    0,    0,    0,  180,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  281,  283,    0,    0,    0,    0,    0,    0,
    0,    0,  216,  216,  216,    0,  216,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,    0,    0,
    0,    0,    0,  216,  216,  216,  216,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  216,    0,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,    0,
  216,    0,  216,  216,  216,  216,  216,  216,  216,  216,
  216,   12,   12,   12,  143,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,    0,    0,    0,
    0,    0,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,    0,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,    0,   12,
    0,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   32,    0,   32,    0,   32,   32,    0,   32,   32,   32,
   32,    0,   32,   32,   32,  143,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   32,    4,   32,   32,   32,
   32,    0,    5,    6,    7,    8,    9,   10,   11,   12,
   95,   96,   13,   14,   15,   16,    0,   17,   18,   19,
   20,   21,   22,   23,   24,   25,    0,    0,   32,    0,
   32,   32,    0,    0,    0,    0,    0,    0,    0,  131,
    0,  131,    0,  131,  131,    0,  131,  131,  131,  131,
  131,  131,  131,  131,    0,    0,    0,    0,    0,    0,
   32,   32,   32,   32,  131,    4,  131,  131,  131,  131,
    0,    5,    6,    7,    8,    9,   10,   11,   12,   95,
   96,   13,   14,   15,   16,    0,   17,   18,   19,   20,
   21,   22,   23,   24,   25,    4,    0,  131,    0,  131,
  131,    5,    6,    7,    8,    9,   10,   11,   12,    0,
    0,   13,   14,   15,   16,    0,   17,   18,   19,   20,
   21,   22,   23,   24,   25,    0,    0,    0,    0,    0,
  131,  131,  131,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  143,    0,    0,    0,    0,    0,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,    0,  143,  143,  143,  143,  143,  143,  143,
  143,  143,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   32,   32,   32,    0,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
    0,    0,    0,    0,    0,   32,   32,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,    0,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   32,    0,   32,    0,   32,   32,   32,   32,   32,   32,
   32,   32,   32,  131,  131,  131,    0,  131,  131,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,    0,
    0,    0,    0,    0,  131,  131,  131,  131,  131,  131,
  131,  131,  131,  131,  131,  131,  131,  131,    0,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
    0,  131,    0,  131,  131,  131,  131,  131,  131,  131,
  131,  131,   73,  303,   73,    0,   73,    0,    0,   73,
   73,   73,   73,   73,   73,   73,   73,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,    0,   73,
   73,   73,   73,  136,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,   73,   73,    0,    0,    0,    0,    0,    0,
    0,   75,    0,   75,    0,   75,   75,    0,   75,   75,
   75,   75,   75,   75,   75,   75,    0,    0,    0,    0,
    0,    0,   73,   73,   73,   73,   75,    0,   75,   75,
   75,   75,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   75,
    0,   75,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    4,   75,   75,   75,   75,    0,    5,    6,    7,    8,
    9,   10,   11,   12,   95,   96,   13,   14,   15,   16,
    0,   17,   18,   19,   20,   21,   22,   23,   24,   25,
  136,    0,    0,    0,    0,    0,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
    0,  136,  136,  136,  136,  136,  136,  136,  136,  136,
    0,    0,    0,    0,    0,    0,   73,   73,   73,    0,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,    0,    0,    0,    0,    0,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,    0,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,    0,   73,    0,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   75,   75,   75,    0,   75,
   75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
   75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
   75,    0,    0,    0,    0,    0,   75,   75,   75,   75,
   75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
    0,   75,   75,   75,   75,   75,   75,   75,   75,   75,
   75,   75,    0,   75,    0,   75,   75,   75,   75,   75,
   75,   75,   75,   75,   77,    0,   77,    0,   77,   77,
    0,   77,   77,   77,   77,   77,   77,   77,   77,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   77,
    0,   77,   77,   77,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   77,    0,   77,   77,    0,    0,    0,    0,
    0,    0,    0,   79,    0,   79,    0,   79,   79,    0,
   79,   79,   79,   79,   79,   79,   79,   79,    0,    0,
    0,    0,    0,    0,   77,    0,   77,   77,   79,    0,
   79,   79,   79,   79,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   79,    0,   79,   79,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   79,   79,   79,   79,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   77,   77,
   77,    0,   77,   77,   77,   77,   77,   77,   77,   77,
   77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
   77,   77,   77,   77,    0,    0,    0,    0,    0,   77,
   77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
   77,   77,   77,    0,   77,   77,   77,   77,   77,   77,
   77,   77,   77,   77,   77,    0,   77,    0,   77,   77,
   77,   77,   77,   77,   77,   77,   77,   79,   79,   79,
    0,   79,   79,   79,   79,   79,   79,   79,   79,   79,
    0,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,    0,    0,    0,    0,    0,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,    0,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,    0,   79,    0,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   13,    0,   13,    0,
   13,   13,    0,   13,   13,   13,   13,    0,   13,   13,
   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   13,    0,   13,   13,   13,   13,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   13,    0,   13,   13,    0,    0,
    0,    0,    0,    0,    0,   59,    0,   59,    0,   59,
   59,    0,   59,   59,   59,    0,   59,    0,   59,   59,
    0,    0,    0,    0,    0,    0,   13,   13,   13,   13,
   59,    0,   59,   59,   59,   59,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   59,    0,   59,   59,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   59,   59,   59,   59,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   13,   13,    0,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,    0,    0,    0,    0,
    0,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,    0,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,    0,   13,    0,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   59,
   59,   59,    0,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   59,   59,   59,    0,    0,    0,    0,    0,
   59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   59,   59,    0,   59,   59,   59,   59,   59,
   59,   59,   59,   59,   59,   59,    0,   59,    0,   59,
   59,   59,   59,   59,   59,   59,   59,   59,   62,    0,
   62,    0,   62,   62,    0,   62,   62,   62,   62,   62,
   62,   62,   62,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   62,    0,   62,   62,   62,   62,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   62,    0,   62,   62,
    0,    0,    0,    0,    0,    0,    0,   70,    0,   70,
    0,   70,   70,    0,   70,   70,   70,   70,   70,   70,
   70,   70,    0,    0,    0,    0,    0,    0,   62,   62,
   62,   62,   70,    0,   70,   70,   70,   70,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   70,    0,   70,   70,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   70,   70,   70,
   70,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   62,   62,   62,    0,   62,   62,   62,    0,
    0,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,    0,    0,
    0,    0,    0,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,    0,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,    0,
   62,    0,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   70,   70,   70,    0,   70,   70,   70,   70,   70,
   70,   70,    0,    0,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,    0,    0,    0,
    0,    0,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,    0,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,    0,   70,
    0,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   80,    0,   80,    0,   80,   80,    0,   80,   80,   80,
   80,   80,   80,   80,   80,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   80,    0,   80,   80,   80,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   80,    0,
   80,   80,    0,    0,    0,    0,    0,    0,    0,   60,
    0,   60,    0,   60,   60,    0,   60,   60,   60,    0,
   60,    0,   60,   60,    0,    0,    0,    0,    0,    0,
   80,   80,   80,   80,   60,    0,   60,   60,   60,   60,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   60,    0,   60,
   60,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,
   60,   60,   60,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   80,   80,   80,    0,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   80,    0,   80,
   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
    0,    0,    0,    0,    0,   80,   80,   80,   80,   80,
   80,   80,   80,   80,   80,   80,   80,   80,   80,    0,
   80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
   80,    0,   80,    0,   80,   80,   80,   80,   80,   80,
   80,   80,   80,   60,   60,   60,    0,   60,   60,   60,
   60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   60,   60,   60,   60,   60,    0,
    0,    0,    0,    0,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   60,   60,   60,   60,    0,   60,
   60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
    0,   60,    0,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   61,    0,   61,    0,   61,   61,    0,   61,
   61,   61,    0,   61,    0,   61,   61,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   61,    0,   61,
   61,   61,   61,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   61,    0,   61,   61,    0,    0,    0,    0,    0,    0,
    0,   65,    0,   65,    0,   65,   65,    0,   65,   65,
   65,   65,   65,   65,   65,   65,    0,    0,    0,    0,
    0,    0,   61,   61,   61,   61,   65,    0,   65,   65,
   65,   65,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
    0,   65,   65,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   65,   65,   65,   65,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   61,   61,   61,    0,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,    0,    0,    0,    0,    0,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,    0,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,    0,   61,    0,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   65,   65,   65,    0,   65,
   65,   65,    0,    0,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,    0,    0,    0,    0,    0,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
    0,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,    0,   65,    0,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   66,    0,   66,    0,   66,   66,
    0,   66,   66,   66,   66,   66,   66,   66,   66,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
    0,   66,   66,   66,   66,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   66,    0,   66,   66,    0,    0,    0,    0,
    0,    0,    0,   63,    0,   63,    0,   63,   63,    0,
   63,   63,   63,   63,   63,   63,   63,   63,    0,    0,
    0,    0,    0,    0,   66,   66,   66,   66,   63,    0,
   63,   63,   63,   63,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   63,    0,   63,   63,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   63,   63,   63,   63,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,   66,
   66,    0,   66,   66,   66,    0,    0,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,    0,    0,    0,    0,    0,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,    0,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,    0,   66,    0,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   63,   63,   63,
    0,   63,   63,   63,    0,    0,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,    0,    0,    0,    0,    0,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,    0,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,    0,   63,    0,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   64,    0,   64,    0,
   64,   64,    0,   64,   64,   64,   64,   64,   64,   64,
   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   64,    0,   64,   64,   64,   64,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   64,    0,   64,   64,    0,    0,
    0,    0,    0,    0,    0,   71,    0,   71,    0,   71,
   71,    0,   71,   71,   71,   71,   71,   71,   71,   71,
    0,    0,    0,    0,    0,    0,   64,   64,   64,   64,
   71,    0,   71,   71,   71,   71,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   71,    0,   71,   71,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   71,   71,   71,   71,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   64,   64,   64,    0,   64,   64,   64,    0,    0,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,    0,    0,    0,    0,
    0,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,    0,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,    0,   64,    0,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   71,
   71,   71,    0,   71,   71,   71,   71,   71,   71,   71,
    0,    0,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,    0,    0,    0,    0,    0,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,    0,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,    0,   71,    0,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   56,    0,
   56,    0,    0,   56,    0,   56,   56,    0,   56,   56,
   56,   56,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   56,    0,   56,   56,   56,   56,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   56,    0,   56,   56,
    0,    0,    0,    0,    0,    0,    0,   57,    0,   57,
    0,    0,   57,    0,   57,   57,    0,   57,   57,   57,
   57,    0,    0,    0,    0,    0,    0,    0,   56,   56,
   56,   56,   57,    0,   57,   57,   57,   57,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   57,    0,   57,   57,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   57,   57,   57,
   57,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   56,   56,   56,    0,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,    0,    0,
    0,    0,    0,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,    0,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,    0,
   56,    0,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   57,   57,   57,    0,   57,   57,   57,   57,   57,
   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
   57,   57,   57,   57,   57,   57,   57,    0,    0,    0,
    0,    0,   57,   57,   57,   57,   57,   57,   57,   57,
   57,   57,   57,   57,   57,   57,    0,   57,   57,   57,
   57,   57,   57,   57,   57,   57,   57,   57,    0,   57,
    0,   57,   57,   57,   57,   57,   57,   57,   57,   57,
   58,    0,   58,    0,    0,   58,    0,   58,   58,    0,
   58,   58,   58,   58,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   58,    0,   58,   58,   58,
   58,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   58,    0,
   58,   58,    0,    0,    0,    0,    0,    0,    0,   67,
    0,   67,    0,   67,   67,    0,   67,   67,   67,   67,
   67,   67,   67,   67,    0,    0,    0,    0,    0,    0,
   58,   58,   58,   58,   67,    0,    0,   67,    0,   67,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   67,    0,   67,
   67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   67,
   67,   67,   67,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   58,   58,   58,    0,   58,   58,
   58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
   58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
    0,    0,    0,    0,    0,   58,   58,   58,   58,   58,
   58,   58,   58,   58,   58,   58,   58,   58,   58,    0,
   58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
   58,    0,   58,    0,   58,   58,   58,   58,   58,   58,
   58,   58,   58,   67,   67,   67,    0,   67,   67,   67,
   67,   67,    0,    0,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,    0,
    0,    0,    0,    0,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,    0,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
    0,   67,    0,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   68,    0,   68,    0,   68,   68,    0,   68,
   68,   68,   68,   68,   68,   68,   68,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   68,    0,    0,
   68,    0,   68,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   68,    0,   68,   68,    0,    0,    0,    0,    0,    0,
    0,   69,    0,   69,    0,   69,   69,    0,   69,   69,
   69,   69,   69,   69,   69,   69,    0,    0,    0,    0,
    0,    0,   68,   68,   68,   68,   69,    0,    0,   69,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
    0,   69,   69,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   69,   69,   69,   69,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   68,   68,   68,    0,
   68,   68,   68,   68,   68,    0,    0,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,    0,    0,    0,    0,    0,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,    0,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,    0,   68,    0,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   69,   69,   69,    0,   69,
   69,   69,   69,   69,    0,    0,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,    0,    0,    0,    0,    0,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
    0,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,    0,   69,    0,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   50,    0,   50,    0,   50,   50,
    0,   50,   50,   50,   50,   50,   50,   50,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   50,
    0,   50,    0,   50,   50,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   50,    0,   50,   50,    0,    0,    0,    0,
    0,    0,    0,   27,    0,    0,    0,   27,   27,    0,
    0,    0,   27,   27,   27,   27,   27,   27,    0,    0,
    0,    0,    0,    0,   50,   50,   50,   50,    0,    0,
   27,   27,   27,   27,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   27,    0,    0,   27,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   27,    9,   27,    9,    0,    9,
    9,    0,    0,    9,    9,    9,    9,    9,    9,    9,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    9,    0,    9,    9,    9,    9,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    9,    0,    9,    9,    0,   50,   50,
   50,    0,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   50,    0,    9,    9,    9,    9,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,    0,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,    0,   50,    0,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   27,   27,   27,
    0,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,    0,    0,    0,    0,    0,   27,   27,
   27,   27,   27,   27,   27,   27,    0,    0,   27,   27,
   27,   27,    0,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,    0,    0,    0,   27,   27,    0,
    0,   27,   27,   27,   27,   27,    0,    0,   45,    0,
   38,    0,    0,   40,    0,   39,    0,   41,   42,    0,
   43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    9,    9,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    9,    9,
    0,    0,    0,    0,    0,    0,   13,    0,  100,    0,
   13,   13,    0,   13,    9,   13,   13,    9,   13,   13,
   13,    9,    9,    9,    9,    9,    9,    9,   46,    0,
    0,   44,    0,   13,   13,   13,   13,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  200,    0,    0,    0,    0,  200,    0,  200,  200,  200,
  200,    0,  200,    0,   13,    0,    0,   13,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  100,   13,  100,   13,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,
    0,    0,   13,   13,    0,   13,   13,   13,   13,    0,
   13,   13,   13,  200,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   13,   13,   13,   13,    0,
    0,    0,    1,    2,    3,    0,  106,    0,  106,    0,
    0,  106,    0,  106,    0,  106,  106,  106,  106,    0,
    0,    0,    0,    0,    0,    0,   13,    4,    0,   13,
    0,    0,    0,    5,    6,    7,    8,    9,   10,   11,
   12,    0,    0,   13,   14,   15,   16,    0,   17,   18,
   19,   20,   21,   22,   23,   24,   25,   26,   27,   13,
   28,   13,   29,   30,   31,   32,   33,   34,   35,   36,
   37,   13,   13,    0,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,  155,  106,  155,  106,  106,
  155,    0,    0,  155,  155,  155,  155,  155,    0,    0,
    0,    0,    0,    0,  200,  200,  200,    0,    0,    0,
  155,    0,    0,  155,    0,   13,   13,    0,  100,    0,
   13,   13,  100,  100,   13,   13,   13,   13,   13,  200,
    0,    0,    0,    0,    0,  200,  200,  200,  200,  200,
  200,  200,  200,    0,    0,  200,  200,  200,  200,    0,
  200,  200,  200,  200,  200,  200,  200,  200,  200,    0,
  200,    0,    0,    0,  200,  200,    0,    0,    0,    0,
    0,    0,  200,    0,    0,  155,    0,  155,  155,    0,
    0,    0,    0,   13,   13,    0,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   45,    0,   38,
    0,    0,   40,    0,   39,    0,   41,   42,    0,   43,
  106,  106,  106,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   13,   13,    0,
    0,    0,   13,   13,    0,  106,   13,   13,   13,   13,
    0,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,  106,  106,  106,  106,    0,  106,  106,  106,  106,
  106,  106,  106,  106,  106,  106,  106,    0,  106,    0,
  106,  106,  106,  106,  106,  106,  106,  106,    0,    0,
    0,    0,    0,    0,    0,    0,   45,   46,   38,  183,
   44,   40,    0,   39,    0,   41,   42,    0,   43,  155,
  155,  155,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  155,    0,    0,    0,    0,    0,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,    0,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,    0,  155,    0,  155,
  155,  155,  155,  155,  155,  155,  155,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   46,    0,  259,   44,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
    0,   99,    0,    0,   99,    0,   99,    0,   99,   99,
    0,   99,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    1,    2,    3,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    4,    0,    0,    0,
    0,    0,    5,    6,    7,    8,    9,   10,   11,   12,
   95,   96,   13,   14,   15,   16,    0,   17,   18,   19,
   20,   21,   22,   23,   24,   25,   26,   27,    0,   28,
    0,   29,   30,   31,   32,   33,   34,   35,   36,   99,
    0,   99,   99,   45,    0,   38,    0,    0,   40,    0,
   39,    0,   41,   42,    0,   43,    0,    0,    0,    0,
    1,    2,    3,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    4,    0,    0,    0,    0,
    0,    5,    6,    7,    8,    9,   10,   11,   12,   95,
   96,   13,   14,   15,   16,    0,   17,   18,   19,   20,
   21,   22,   23,   24,   25,   26,   27,    0,   28,    0,
   29,   30,   31,   32,   33,   34,   35,   36,    0,    0,
    0,    0,    0,   46,    0,  257,   44,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   45,    0,   38,    0,    0,   40,    0,   39,    0,
   41,   42,    0,   43,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   99,   99,   99,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   99,    0,
    0,    0,    0,    0,   99,   99,   99,   99,   99,   99,
   99,   99,   99,   99,   99,   99,   99,   99,    0,   99,
   99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
    0,   99,    0,   99,   99,   99,   99,   99,   99,   99,
   99,   46,    0,  301,   44,   98,    0,   98,    0,    0,
   98,    0,    0,    0,   98,   98,    0,   98,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    2,    3,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    4,    0,    0,    0,    0,    0,    5,    6,
    7,    8,    9,   10,   11,   12,    0,    0,   13,   14,
   15,   16,    0,   17,   18,   19,   20,   21,   22,   23,
   24,   25,   26,   27,    0,   28,    0,   29,   30,   31,
   32,   33,   34,   35,   36,   98,    0,   98,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   45,    0,   38,    0,    0,   40,    0,
   39,    0,   41,   42,    0,   43,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    1,    2,    3,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    4,    0,    0,    0,    0,    0,    5,    6,    7,    8,
    9,   10,   11,   12,    0,    0,   13,   14,   15,   16,
    0,   17,   18,   19,   20,   21,   22,   23,   24,   25,
   26,   27,    0,   28,    0,   29,   30,   31,   32,   33,
   34,   35,   36,   46,    0,    0,   44,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   45,    0,    0,    0,
    0,   40,    0,  118,    0,   91,   42,    0,   43,  120,
   98,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   98,    0,    0,    0,    0,    0,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,  119,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,    0,   98,    0,   98,
   98,   98,   98,   98,   98,   98,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   44,
    0,    0,    0,    0,    0,    0,    0,    0,  102,    0,
  102,    0,    0,  102,    0,  102,  102,  102,  102,  102,
  102,    0,    0,    0,    0,    0,    0,    1,    2,    3,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    4,    0,    0,    0,    0,    0,    5,    6,
    7,    8,    9,   10,   11,   12,  102,    0,   13,   14,
   15,   16,    0,   17,   18,   19,   20,   21,   22,   23,
   24,   25,   26,   27,    0,   28,    0,   29,   30,   31,
   32,   33,   34,   35,   36,    0,    0,    0,  102,    0,
  102,  102,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,    0,  100,    0,    0,  100,    0,  100,  100,
  100,  100,  100,  100,    0,    0,    0,    0,    0,    0,
    1,    2,    3,    0,  115,  116,  117,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    4,    0,    0,    0,    0,
    0,    5,    6,    7,    8,    9,   10,   11,   12,  100,
    0,   13,   14,   15,   16,    0,   17,   18,   19,   20,
   21,   22,   23,   24,   25,   26,   27,    0,    0,    0,
   29,   90,    0,    0,   33,   34,   35,   36,    0,    0,
    0,  100,    0,  100,  100,    0,    0,    0,    0,    0,
    0,    0,  212,    0,  212,    0,    0,    0,  212,    0,
    0,  212,    0,  212,  212,    0,    0,    0,    0,    0,
    0,    0,  102,  102,  102,  212,    0,  212,  212,  212,
  212,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  212,    0,
  212,  212,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  102,  102,    0,
  102,    0,  102,  102,  102,  102,  102,  102,  102,  102,
  212,  212,  212,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  215,    0,  215,    0,    0,
    0,  215,    0,    0,  215,    0,  215,  215,    0,    0,
    0,    0,    0,    0,    0,  100,  100,  100,  215,    0,
  215,  215,  215,  215,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  215,    0,  215,  215,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  100,    0,  100,    0,  100,  100,  100,  100,  100,
  100,  100,  100,  215,  215,  215,    0,    0,    0,    0,
    0,    0,    0,   45,    0,    0,    0,    0,   40,    0,
   39,  195,   91,   42,    0,   43,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  212,  212,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  212,
    0,    0,  212,    0,    0,    0,  212,  212,  212,  212,
  212,  212,  212,    0,    0,    0,   44,    0,   41,    0,
   41,    0,    0,    0,   41,    0,    0,   41,    0,   41,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,    0,   41,   41,   41,   41,    0,    0,    0,
    0,  215,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  215,    0,    0,   41,    0,   41,   41,    0,    0,
    0,    0,    0,    0,    0,    0,  215,  215,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  215,    0,    0,  215,   41,   41,   41,  215,
  215,  215,  215,  215,  215,  215,   42,    0,   42,    0,
    0,    0,   42,    0,    0,   42,    0,    0,   42,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   42,
    0,   42,   42,   42,   42,    0,    0,    1,    2,    3,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    4,    0,   42,   42,    0,    0,    5,    6,
    7,    8,    9,   10,   11,   12,   95,   96,   13,   14,
   15,   16,    0,   17,   18,   19,   20,   21,   22,   23,
   24,   25,    0,   27,   42,   42,   42,   29,   90,    0,
    0,    0,    0,    0,    0,    0,   45,    0,    0,    0,
    0,   40,    0,   39,    0,   91,   42,    0,   43,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   45,   41,
   41,    0,    0,   40,    0,   39,    0,   91,   42,    0,
   43,    0,    0,    0,    0,   41,    0,    0,   41,    0,
    0,    0,   41,   41,   41,   41,   41,   41,   41,   44,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,    0,    0,    0,    0,    0,  317,    0,
  339,   44,    0,    0,   45,    0,    0,   42,   42,   40,
    0,   39,    0,   91,   42,    0,   43,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
   42,   42,    0,    0,    0,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  244,    0,    0,    0,   45,    0,
    1,    2,    3,   40,    0,   39,  282,   91,   42,    0,
   43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    4,    0,   44,    0,    0,
    0,    5,    6,    7,    8,    9,   10,   11,   12,   95,
   96,   13,   14,   15,   16,    0,   17,   18,   19,   20,
   21,   22,   23,   24,   25,    0,   27,    0,    0,    0,
   29,   90,    1,    2,    3,    0,    0,    0,   45,    0,
    0,    0,    0,   40,    0,   39,    0,   91,   42,    0,
   43,    0,    0,    0,    0,    0,    0,    4,    0,    0,
    0,   44,    0,    5,    6,    7,    8,    9,   10,   11,
   12,    0,    0,   13,   14,   15,   16,    0,   17,   18,
   19,   20,   21,   22,   23,   24,   25,    0,   27,    0,
    0,    0,   29,   90,    0,    0,    0,    0,  294,    0,
    0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
   40,    0,   39,    0,   91,   42,    0,   43,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    1,    2,
    3,   44,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    4,    0,    0,    0,    0,    0,    5,
    6,    7,    8,    9,   10,   11,   12,    0,    0,   13,
   14,   15,   16,    0,   17,   18,   19,   20,   21,   22,
   23,   24,   25,    0,   27,    0,    0,    0,   29,   90,
    0,    0,    1,    2,    3,  317,   45,    0,   44,    0,
    0,   40,    0,   39,    0,   91,   42,    0,   43,    0,
    0,    0,    0,    0,    0,    0,    0,    4,    0,    0,
    0,    0,    0,    5,    6,    7,    8,    9,   10,   11,
   12,    0,    0,   13,   14,   15,   16,    0,   17,   18,
   19,   20,   21,   22,   23,   24,   25,    0,   27,    0,
    0,    0,   29,   90,    0,    0,  324,    0,    0,    0,
   45,    0,    1,    2,    3,   40,    0,   39,    0,   91,
   42,    0,   43,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    4,    0,   44,
    0,    0,    0,    5,    6,    7,    8,    9,   10,   11,
   12,    0,    0,   13,   14,   15,   16,    0,   17,   18,
   19,   20,   21,   22,   23,   24,   25,    0,   27,    0,
    0,    0,   29,   90,    0,    0,    0,    0,    0,    1,
    2,    3,   45,    0,    0,    0,    0,   45,    0,   45,
    0,   45,   45,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,   44,    4,    0,    0,    0,    0,    0,
    5,    6,    7,    8,    9,   10,   11,   12,    0,    0,
   13,   14,   15,   16,    0,   17,   18,   19,   20,   21,
   22,   23,   24,   25,    0,   27,    0,    0,    0,   29,
   90,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    1,    2,    3,    0,    0,   45,    0,    0,    0,    0,
    0,   97,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    4,    0,    0,    0,    0,
    0,    5,    6,    7,    8,    9,   10,   11,   12,    0,
    0,   13,   14,   15,   16,    0,   17,   18,   19,   20,
   21,   22,   23,   24,   25,    0,   27,    0,    0,    0,
   29,   90,    0,    0,    1,    2,    3,    0,    0,  174,
    0,    0,  174,    0,    0,  185,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    4,
   97,    0,    0,    0,    0,    5,    6,    7,    8,    9,
   10,   11,   12,    0,    0,   13,   14,   15,   16,    0,
   17,   18,   19,   20,   21,   22,   23,   24,   25,    0,
   27,    0,    0,    0,   29,   90,    0,    0,    0,    0,
  174,    0,    0,    0,    0,    0,    0,   45,   45,    0,
    0,    0,    0,    0,    0,    0,  174,  136,    0,    0,
    0,  238,    0,    0,    0,    0,    0,  238,    0,    0,
  238,   45,  185,    0,    0,    0,    0,   45,   45,   45,
   45,   45,   45,   45,   45,    0,    0,   45,   45,   45,
   45,    0,   45,   45,   45,   45,   45,   45,   45,   45,
   45,    0,   45,  174,  174,    0,   45,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  238,    0,    0,    0,    0,    0,    0,    0,    0,  238,
    0,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,    0,
  174,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  238,    0,    0,
  136,  238,    0,  136,    0,    0,    0,    0,    0,    0,
    0,  238,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  136,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  136,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  136,    0,    0,    0,  136,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  136,    0,    0,    0,    0,  136,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         44,
    0,   61,   63,  101,  123,   40,   41,   40,   41,   61,
   40,   40,   44,  123,   39,   42,   42,   40,  103,  224,
   39,  247,   64,   58,  107,   58,   44,   44,   58,   60,
  173,   62,   40,   33,  239,   35,   40,   44,   38,   44,
   40,   44,   42,   43,  222,   45,  251,   37,  317,  180,
   44,  194,   42,   87,   94,   40,   91,   47,   91,  257,
   41,  113,   91,   44,   58,   40,  118,  336,   40,   43,
   40,   45,   97,  299,   41,  100,   93,   44,   97,   41,
  285,  100,   44,  135,  257,   41,   41,   91,   44,   44,
  268,   41,  325,  118,   44,  226,  138,  139,  140,  118,
  185,  306,   33,  188,   35,  190,   37,  125,  191,   40,
   41,   42,   43,   44,   45,   46,   47,  248,  125,   91,
  125,   91,  125,  123,  325,  125,  126,   58,  325,   60,
   61,   62,   63,  173,  168,  177,  267,  325,  257,  158,
  271,  239,  325,  145,  146,  147,  148,  257,  200,  174,
  264,  265,   38,  238,  194,  174,   41,  325,   41,   44,
   91,   44,   93,   94,  226,   41,  268,  269,   44,  300,
  325,   33,   94,   35,  305,   37,   38,  124,   40,   41,
   42,   43,   44,   45,   46,   47,  248,   60,   61,  141,
  142,  270,  123,  124,  125,  126,   58,  123,   60,   61,
   62,   63,  221,  222,  143,  144,  149,  150,  257,  271,
  271,   44,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  257,  318,  257,  257,   44,  257,  257,   91,
   44,   93,  259,  259,  257,  266,  267,  257,  300,   41,
   44,  257,  123,  305,  259,  257,  298,   44,   61,  268,
   42,   40,   42,   41,   41,   93,   61,  257,  258,  259,
  257,  123,  124,  125,  126,  317,  257,  312,   44,   44,
   44,   41,   58,  316,   93,   41,  321,  322,  323,  324,
   41,   93,  282,    0,  336,   41,  257,  325,  288,  289,
  290,  291,  292,  293,  294,  295,   41,   47,  298,  299,
  300,  301,  118,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  151,  315,  152,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  257,  258,  259,  153,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,   31,  154,  221,  155,  190,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  306,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  297,  315,  227,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  257,  258,  259,   40,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,  159,  190,  289,  103,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,   -1,  317,  318,  319,  320,  321,
  322,  323,  324,  325,   33,   -1,   35,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  189,  190,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   35,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,  230,  231,   -1,  123,   -1,  125,  126,   58,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   -1,  257,  258,  259,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,  126,   -1,  307,   -1,
   -1,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,   -1,   -1,  298,  299,  300,  301,
   -1,  303,  304,  305,  306,  307,  308,  309,  310,  311,
   -1,  313,   -1,   -1,   -1,  317,  318,   -1,   -1,   -1,
   41,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,   -1,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,   44,  315,   -1,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  257,  258,  259,
   -1,  261,  262,  263,  264,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,   -1,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,  315,   -1,  317,  318,  319,
  320,  321,  322,  323,  324,  325,   33,  257,   35,   -1,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,  282,   60,   61,   62,   63,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,   -1,  303,  304,  305,  306,  307,  308,  309,
  310,  311,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   35,   -1,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,  126,
   58,  282,   60,   61,   62,   63,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,   -1,  303,  304,  305,  306,  307,  308,  309,  310,
  311,   -1,   -1,   91,   -1,   93,   94,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   41,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,   -1,  123,  124,  125,  126,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,   91,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,   -1,   -1,
  257,  258,  259,   -1,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,   -1,  315,   -1,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  257,
  258,  259,   -1,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,   -1,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,   -1,  317,
  318,  319,  320,  321,  322,  323,  324,  325,   33,  257,
   35,   -1,   37,   38,  125,   40,   41,   42,   43,   -1,
   45,   46,   47,   -1,   34,   -1,   36,   -1,   -1,   39,
   -1,   -1,   -1,   58,  282,   60,   61,   62,   63,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,   -1,  303,  304,  305,  306,  307,
  308,  309,  310,  311,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,   84,   85,   -1,   33,   -1,   35,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,
  125,  126,   58,   -1,   60,   61,   62,   63,  118,  119,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  156,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   41,   -1,   -1,   -1,   -1,
   -1,  171,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,
  126,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,   -1,  303,  304,  305,  306,  307,  308,  309,  310,
  311,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  232,  233,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,   -1,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,   -1,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,   -1,
  315,   -1,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  257,  258,  259,   44,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,  315,
   -1,  317,  318,  319,  320,  321,  322,  323,  324,  325,
   33,   -1,   35,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,  282,   60,   61,   62,
   63,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,   -1,   -1,   91,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   35,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,  126,   58,  282,   60,   61,   62,   63,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  282,   -1,   91,   -1,   93,
   94,  288,  289,  290,  291,  292,  293,  294,  295,   -1,
   -1,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,   -1,   -1,   -1,   -1,   -1,
  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,   -1,  303,  304,  305,  306,  307,  308,  309,
  310,  311,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,   -1,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,   -1,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,   -1,  315,   -1,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  257,  258,  259,   -1,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  280,  281,  282,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,   -1,  317,  318,  319,  320,  321,  322,  323,
  324,  325,   33,  125,   35,   -1,   37,   -1,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   60,
   61,   62,   63,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   35,   -1,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  124,  125,  126,   58,   -1,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,  123,  124,  125,  126,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,  303,  304,  305,  306,  307,  308,  309,  310,  311,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,   -1,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,   -1,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,   -1,  315,   -1,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  257,  258,  259,   -1,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,   -1,  317,  318,  319,  320,  321,
  322,  323,  324,  325,   33,   -1,   35,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   35,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   58,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,   -1,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,   -1,  315,   -1,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  257,  258,  259,
   -1,  261,  262,  263,  264,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,   -1,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,  315,   -1,  317,  318,  319,
  320,  321,  322,  323,  324,  325,   33,   -1,   35,   -1,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   35,   -1,   37,
   38,   -1,   40,   41,   42,   -1,   44,   -1,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,
   58,   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,   -1,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,   -1,  315,   -1,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  257,
  258,  259,   -1,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,   -1,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,   -1,  317,
  318,  319,  320,  321,  322,  323,  324,  325,   33,   -1,
   35,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   -1,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   35,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,
  125,  126,   58,   -1,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,   -1,  261,  262,  263,   -1,
   -1,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,   -1,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,   -1,
  315,   -1,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  257,  258,  259,   -1,  261,  262,  263,  264,  265,
  266,  267,   -1,   -1,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,  315,
   -1,  317,  318,  319,  320,  321,  322,  323,  324,  325,
   33,   -1,   35,   -1,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   35,   -1,   37,   38,   -1,   40,   41,   42,   -1,
   44,   -1,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,  126,   58,   -1,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,   -1,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,   -1,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,   -1,  315,   -1,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  257,  258,  259,   -1,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  280,  281,  282,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,   -1,  317,  318,  319,  320,  321,  322,  323,
  324,  325,   33,   -1,   35,   -1,   37,   38,   -1,   40,
   41,   42,   -1,   44,   -1,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   35,   -1,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  124,  125,  126,   58,   -1,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,   -1,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,   -1,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,   -1,  315,   -1,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  257,  258,  259,   -1,  261,
  262,  263,   -1,   -1,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,   -1,  317,  318,  319,  320,  321,
  322,  323,  324,  325,   33,   -1,   35,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   35,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,  126,   58,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,   -1,  261,  262,  263,   -1,   -1,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,   -1,  315,   -1,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  257,  258,  259,
   -1,  261,  262,  263,   -1,   -1,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,   -1,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,  315,   -1,  317,  318,  319,
  320,  321,  322,  323,  324,  325,   33,   -1,   35,   -1,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   35,   -1,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,
   58,   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,   -1,  261,  262,  263,   -1,   -1,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,   -1,  315,   -1,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  257,
  258,  259,   -1,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,   -1,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,   -1,  317,
  318,  319,  320,  321,  322,  323,  324,  325,   33,   -1,
   35,   -1,   -1,   38,   -1,   40,   41,   -1,   43,   44,
   45,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   -1,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   35,
   -1,   -1,   38,   -1,   40,   41,   -1,   43,   44,   45,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,
  125,  126,   58,   -1,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,   -1,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,   -1,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,   -1,
  315,   -1,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  257,  258,  259,   -1,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,  315,
   -1,  317,  318,  319,  320,  321,  322,  323,  324,  325,
   33,   -1,   35,   -1,   -1,   38,   -1,   40,   41,   -1,
   43,   44,   45,   46,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   35,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,  126,   58,   -1,   -1,   61,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  124,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,   -1,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,   -1,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,   -1,  315,   -1,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  257,  258,  259,   -1,  261,  262,  263,
  264,  265,   -1,   -1,  268,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  280,  281,  282,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,   -1,  317,  318,  319,  320,  321,  322,  323,
  324,  325,   33,   -1,   35,   -1,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,
   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   35,   -1,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  124,  125,  126,   58,   -1,   -1,   61,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,  124,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,   -1,
  261,  262,  263,  264,  265,   -1,   -1,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,   -1,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,   -1,  315,   -1,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  257,  258,  259,   -1,  261,
  262,  263,  264,  265,   -1,   -1,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,   -1,  317,  318,  319,  320,  321,
  322,  323,  324,  325,   33,   -1,   35,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,
   -1,   -1,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,  126,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   33,  126,   35,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,  257,  258,
  259,   -1,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,   -1,  123,  124,  125,  126,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,   -1,  315,   -1,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  257,  258,  259,
   -1,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,   -1,   -1,  298,  299,
  300,  301,   -1,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,   -1,   -1,  317,  318,   -1,
   -1,  321,  322,  323,  324,  325,   -1,   -1,   33,   -1,
   35,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   35,   -1,
   37,   38,   -1,   40,  312,   42,   43,  315,   45,   46,
   47,  319,  320,  321,  322,  323,  324,  325,  123,   -1,
   -1,  126,   -1,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,
   43,   -1,   45,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,   46,   47,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,   -1,
   -1,   -1,  257,  258,  259,   -1,   33,   -1,   35,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   44,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,  282,   -1,   94,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,   -1,   -1,  298,  299,  300,  301,   -1,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  124,
  315,  126,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  258,  259,   -1,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,   33,  123,   35,  125,  126,
   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,   -1,   -1,   -1,
   58,   -1,   -1,   61,   -1,  312,  313,   -1,  315,   -1,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  282,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,   -1,   -1,  298,  299,  300,  301,   -1,
  303,  304,  305,  306,  307,  308,  309,  310,  311,   -1,
  313,   -1,   -1,   -1,  317,  318,   -1,   -1,   -1,   -1,
   -1,   -1,  325,   -1,   -1,  123,   -1,  125,  126,   -1,
   -1,   -1,   -1,  258,  259,   -1,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,   33,   -1,   35,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
  257,  258,  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  312,  313,   -1,
   -1,   -1,  317,  318,   -1,  282,  321,  322,  323,  324,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,   -1,  315,   -1,
  317,  318,  319,  320,  321,  322,  323,  324,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,  123,   35,  125,
  126,   38,   -1,   40,   -1,   42,   43,   -1,   45,  257,
  258,  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,   -1,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,   -1,  317,
  318,  319,  320,  321,  322,  323,  324,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   35,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,   -1,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,  315,
   -1,  317,  318,  319,  320,  321,  322,  323,  324,  123,
   -1,  125,  126,   33,   -1,   35,   -1,   -1,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
  257,  258,  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,   -1,  315,   -1,
  317,  318,  319,  320,  321,  322,  323,  324,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   35,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,   -1,  317,  318,  319,  320,  321,  322,  323,
  324,  123,   -1,  125,  126,   33,   -1,   35,   -1,   -1,
   38,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,   -1,   -1,  298,  299,
  300,  301,   -1,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,  315,   -1,  317,  318,  319,
  320,  321,  322,  323,  324,  123,   -1,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   35,   -1,   -1,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,   -1,   -1,  298,  299,  300,  301,
   -1,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,   -1,  317,  318,  319,  320,  321,
  322,  323,  324,  123,   -1,   -1,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
  258,  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,   91,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,   -1,  317,
  318,  319,  320,  321,  322,  323,  324,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   35,   -1,   -1,   38,   -1,   40,   41,   42,   43,   44,
   45,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,   91,   -1,  298,  299,
  300,  301,   -1,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,  315,   -1,  317,  318,  319,
  320,  321,  322,  323,  324,   -1,   -1,   -1,  123,   -1,
  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   35,   -1,   -1,   38,   -1,   40,   41,
   42,   43,   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,   -1,  261,  262,  263,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,   91,
   -1,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,   -1,   -1,   -1,
  317,  318,   -1,   -1,  321,  322,  323,  324,   -1,   -1,
   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   35,   -1,   37,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,   58,   -1,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  312,  313,   -1,
  315,   -1,  317,  318,  319,  320,  321,  322,  323,  324,
  123,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   35,   -1,   37,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,   58,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  312,  313,   -1,  315,   -1,  317,  318,  319,  320,  321,
  322,  323,  324,  123,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   41,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  312,
   -1,   -1,  315,   -1,   -1,   -1,  319,  320,  321,  322,
  323,  324,  325,   -1,   -1,   -1,  126,   -1,   35,   -1,
   37,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  312,   -1,   -1,  315,  123,  124,  125,  319,
  320,  321,  322,  323,  324,  325,   35,   -1,   37,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   60,   61,   62,   63,   -1,   -1,  257,  258,  259,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   93,   94,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,   -1,  303,  304,  305,  306,  307,  308,  309,
  310,  311,   -1,  313,  123,  124,  125,  317,  318,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,  296,
  297,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,  312,   -1,   -1,  315,   -1,
   -1,   -1,  319,  320,  321,  322,  323,  324,  325,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,  126,   -1,   -1,   33,   -1,   -1,  296,  297,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,   -1,
  319,  320,   -1,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   33,   -1,
  257,  258,  259,   38,   -1,   40,   41,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,   -1,  126,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,   -1,  313,   -1,   -1,   -1,
  317,  318,  257,  258,  259,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
   -1,  126,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,   -1,   -1,  298,  299,  300,  301,   -1,  303,  304,
  305,  306,  307,  308,  309,  310,  311,   -1,  313,   -1,
   -1,   -1,  317,  318,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,   -1,   -1,  298,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,   -1,  313,   -1,   -1,   -1,  317,  318,
   -1,   -1,  257,  258,  259,  123,   33,   -1,  126,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,   -1,   -1,  298,  299,  300,  301,   -1,  303,  304,
  305,  306,  307,  308,  309,  310,  311,   -1,  313,   -1,
   -1,   -1,  317,  318,   -1,   -1,   93,   -1,   -1,   -1,
   33,   -1,  257,  258,  259,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,  126,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,   -1,   -1,  298,  299,  300,  301,   -1,  303,  304,
  305,  306,  307,  308,  309,  310,  311,   -1,  313,   -1,
   -1,   -1,  317,  318,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  126,  282,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,   -1,   -1,
  298,  299,  300,  301,   -1,  303,  304,  305,  306,  307,
  308,  309,  310,  311,   -1,  313,   -1,   -1,   -1,  317,
  318,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   39,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,   -1,
   -1,  298,  299,  300,  301,   -1,  303,  304,  305,  306,
  307,  308,  309,  310,  311,   -1,  313,   -1,   -1,   -1,
  317,  318,   -1,   -1,  257,  258,  259,   -1,   -1,   97,
   -1,   -1,  100,   -1,   -1,  103,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
  118,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,   -1,   -1,  298,  299,  300,  301,   -1,
  303,  304,  305,  306,  307,  308,  309,  310,  311,   -1,
  313,   -1,   -1,   -1,  317,  318,   -1,   -1,   -1,   -1,
  158,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  174,   64,   -1,   -1,
   -1,  179,   -1,   -1,   -1,   -1,   -1,  185,   -1,   -1,
  188,  282,  190,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,   -1,   -1,  298,  299,  300,
  301,   -1,  303,  304,  305,  306,  307,  308,  309,  310,
  311,   -1,  313,  221,  222,   -1,  317,  318,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  238,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  247,
   -1,  138,  139,  140,  141,  142,  143,  144,  145,  146,
  147,  148,  149,  150,  151,  152,  153,  154,  155,   -1,
  268,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  177,  289,   -1,  180,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  226,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  248,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,  305,
};
}
final static short YYFINAL=47;
final static short YYMAXTOKEN=326;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,"'#'",null,"'%'","'&'",null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
null,"'<'","'='","'>'","'?'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'","'^'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"IDENTIFIER","CONSTANT",
"STRING_LITERAL","SIZEOF","PTR_OP","INC_OP","DEC_OP","LEFT_OP","RIGHT_OP",
"LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN",
"MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN",
"AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","TYPE_NAME","TYPEDEF","EXTERN","STATIC",
"AUTO","REGISTER","CHAR","SHORT","INT","LONG","SIGNED","UNSIGNED","FLOAT",
"DOUBLE","CONST","VOLATILE","VOID","STRUCT","UNION","ENUM","ELLIPSIS","VAR",
"PVAL","BMSCR","PREFSTR","PEXINFO","NULLPTR","STR","SPTR","ARRAY","GOSUB",
"CASE","DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE",
"BREAK","RETURN","NEWLINE","LOWER_THAN_ELSE",
};
final static String yyrule[] = {
"$accept : hsp_source",
"hsp_source : chunk",
"hsp_source : hsp_source chunk",
"chunk : statement",
"chunk : NEWLINE",
"chunk :",
"macro : '#' IDENTIFIER args",
"macro : '#' IDENTIFIER",
"args : primary_expression args",
"args : primary_expression",
"lis : type_specifier IDENTIFIER ',' lis",
"lis : type_specifier ',' lis",
"lis : type_specifier IDENTIFIER",
"lis : type_specifier",
"statement : labeled_statement NEWLINE",
"statement : compound_statement NEWLINE",
"statement : expression_statement NEWLINE",
"statement : selection_statement",
"statement : iteration_statement NEWLINE",
"statement : jump_statement NEWLINE",
"statement : macro NEWLINE",
"primary_expression : lis",
"primary_expression : CONSTANT",
"primary_expression : STRING_LITERAL",
"primary_expression : IDENTIFIER",
"primary_expression : SWITCH",
"primary_expression : CASE",
"primary_expression : WHILE",
"primary_expression : '(' expression ')'",
"postfix_expression : primary_expression",
"postfix_expression : postfix_expression '[' expression ']'",
"postfix_expression : postfix_expression '(' ')'",
"postfix_expression : postfix_expression argument_expression_list",
"postfix_expression : postfix_expression '(' argument_expression_list ')'",
"postfix_expression : postfix_expression '.' IDENTIFIER",
"postfix_expression : postfix_expression PTR_OP STRING_LITERAL args",
"postfix_expression : postfix_expression jump_statement",
"postfix_expression : postfix_expression INC_OP",
"postfix_expression : postfix_expression DEC_OP",
"argument_expression_list : assignment_expression",
"argument_expression_list : argument_expression_list ',' assignment_expression",
"argument_expression_list : argument_expression_list ','",
"unary_expression : postfix_expression",
"unary_expression : unary_operator cast_expression",
"unary_operator : '&'",
"unary_operator : '*'",
"unary_operator : '+'",
"unary_operator : '-'",
"unary_operator : '~'",
"unary_operator : '!'",
"cast_expression : unary_expression",
"cast_expression : '(' type_name ')' cast_expression",
"multiplicative_expression : cast_expression",
"multiplicative_expression : multiplicative_expression '*' cast_expression",
"multiplicative_expression : multiplicative_expression '/' cast_expression",
"multiplicative_expression : multiplicative_expression '%' cast_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression '+' multiplicative_expression",
"additive_expression : additive_expression '-' multiplicative_expression",
"shift_expression : additive_expression",
"shift_expression : shift_expression LEFT_OP additive_expression",
"shift_expression : shift_expression RIGHT_OP additive_expression",
"relational_expression : shift_expression",
"relational_expression : relational_expression '<' shift_expression",
"relational_expression : relational_expression '>' shift_expression",
"relational_expression : relational_expression LE_OP shift_expression",
"relational_expression : relational_expression GE_OP shift_expression",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQ_OP relational_expression",
"equality_expression : equality_expression NE_OP relational_expression",
"and_expression : equality_expression",
"and_expression : and_expression '&' equality_expression",
"exclusive_or_expression : and_expression",
"exclusive_or_expression : exclusive_or_expression '^' and_expression",
"inclusive_or_expression : exclusive_or_expression",
"inclusive_or_expression : inclusive_or_expression '|' exclusive_or_expression",
"logical_and_expression : inclusive_or_expression",
"logical_and_expression : logical_and_expression AND_OP inclusive_or_expression",
"logical_or_expression : logical_and_expression",
"logical_or_expression : logical_or_expression OR_OP logical_and_expression",
"conditional_expression : logical_or_expression",
"conditional_expression : logical_or_expression '?' expression ':' conditional_expression",
"assignment_expression : conditional_expression",
"assignment_expression : unary_expression assignment_operator assignment_expression",
"assignment_operator : '='",
"assignment_operator : MUL_ASSIGN",
"assignment_operator : DIV_ASSIGN",
"assignment_operator : MOD_ASSIGN",
"assignment_operator : ADD_ASSIGN",
"assignment_operator : SUB_ASSIGN",
"assignment_operator : LEFT_ASSIGN",
"assignment_operator : RIGHT_ASSIGN",
"assignment_operator : AND_ASSIGN",
"assignment_operator : XOR_ASSIGN",
"assignment_operator : OR_ASSIGN",
"expression : assignment_expression",
"expression : expression ',' assignment_expression",
"constant_expression : conditional_expression",
"declaration : declaration_specifiers",
"declaration : declaration_specifiers init_declarator_list",
"declaration_specifiers : type_specifier",
"declaration_specifiers : type_specifier declaration_specifiers",
"declaration_specifiers : type_qualifier",
"declaration_specifiers : type_qualifier declaration_specifiers",
"init_declarator_list : init_declarator",
"init_declarator_list : init_declarator_list ',' init_declarator",
"init_declarator : declarator",
"init_declarator : declarator '=' initializer",
"type_specifier : VOID",
"type_specifier : CHAR",
"type_specifier : SHORT",
"type_specifier : INT",
"type_specifier : LONG",
"type_specifier : FLOAT",
"type_specifier : DOUBLE",
"type_specifier : SIGNED",
"type_specifier : UNSIGNED",
"type_specifier : struct_or_union_specifier",
"type_specifier : enum_specifier",
"type_specifier : TYPE_NAME",
"type_specifier : VAR",
"type_specifier : PVAL",
"type_specifier : BMSCR",
"type_specifier : PREFSTR",
"type_specifier : PEXINFO",
"type_specifier : NULLPTR",
"type_specifier : STR",
"type_specifier : SPTR",
"type_specifier : ARRAY",
"struct_or_union_specifier : struct_or_union IDENTIFIER '{' struct_declaration_list '}'",
"struct_or_union_specifier : struct_or_union '{' struct_declaration_list '}'",
"struct_or_union_specifier : struct_or_union IDENTIFIER",
"struct_or_union : STRUCT",
"struct_or_union : UNION",
"struct_declaration_list : struct_declaration",
"struct_declaration_list : struct_declaration_list struct_declaration",
"struct_declaration : specifier_qualifier_list struct_declarator_list",
"specifier_qualifier_list : type_specifier specifier_qualifier_list",
"specifier_qualifier_list : type_specifier",
"specifier_qualifier_list : type_qualifier specifier_qualifier_list",
"specifier_qualifier_list : type_qualifier",
"struct_declarator_list : struct_declarator",
"struct_declarator_list : struct_declarator_list ',' struct_declarator",
"struct_declarator : declarator",
"struct_declarator : ':' constant_expression",
"struct_declarator : declarator ':' constant_expression",
"enum_specifier : ENUM '{' enumerator_list '}'",
"enum_specifier : ENUM IDENTIFIER '{' enumerator_list '}'",
"enum_specifier : ENUM IDENTIFIER",
"enumerator_list : enumerator",
"enumerator_list : enumerator_list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant_expression",
"type_qualifier : CONST",
"type_qualifier : VOLATILE",
"declarator : direct_declarator",
"direct_declarator : IDENTIFIER",
"direct_declarator : '(' declarator ')'",
"direct_declarator : direct_declarator '[' constant_expression ']'",
"direct_declarator : direct_declarator '[' ']'",
"direct_declarator : direct_declarator '(' parameter_type_list ')'",
"direct_declarator : direct_declarator '(' identifier_list ')'",
"direct_declarator : direct_declarator '(' ')'",
"type_qualifier_list : type_qualifier",
"type_qualifier_list : type_qualifier_list type_qualifier",
"parameter_type_list : parameter_list",
"parameter_type_list : parameter_list ',' ELLIPSIS",
"parameter_list : parameter_declaration",
"parameter_list : parameter_list ',' parameter_declaration",
"parameter_declaration : declaration_specifiers declarator",
"parameter_declaration : declaration_specifiers abstract_declarator",
"parameter_declaration : declaration_specifiers",
"identifier_list : IDENTIFIER",
"identifier_list : identifier_list ',' IDENTIFIER",
"type_name : specifier_qualifier_list",
"type_name : specifier_qualifier_list abstract_declarator",
"abstract_declarator : direct_abstract_declarator",
"direct_abstract_declarator : '(' abstract_declarator ')'",
"direct_abstract_declarator : '[' ']'",
"direct_abstract_declarator : '[' constant_expression ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' constant_expression ']'",
"direct_abstract_declarator : '(' ')'",
"direct_abstract_declarator : '(' parameter_type_list ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' parameter_type_list ')'",
"initializer : assignment_expression",
"initializer : '{' initializer_list '}'",
"initializer : '{' initializer_list ',' '}'",
"initializer_list : initializer",
"initializer_list : initializer_list ',' initializer",
"labeled_statement : '*' IDENTIFIER",
"compound_statement : '{' NEWLINE '}'",
"compound_statement : '{' NEWLINE statement_list '}'",
"compound_statement : '{' NEWLINE declaration_list '}'",
"compound_statement : '{' NEWLINE declaration_list statement_list '}'",
"declaration_list : declaration",
"declaration_list : declaration_list declaration",
"statement_list : statement",
"statement_list : statement_list statement",
"expression_statement : expression",
"expression_statement : expression jump_statement",
"selection_statement : IF '(' expression ')' statement",
"selection_statement : IF '(' expression ')' statement ELSE statement",
"iteration_statement : WHILE '(' expression ')' statement",
"iteration_statement : DO statement WHILE '(' expression ')'",
"iteration_statement : FOR '(' expression_statement expression_statement ')' statement",
"iteration_statement : FOR '(' expression_statement expression_statement expression ')' statement",
"jump_statement : GOTO '*' IDENTIFIER",
"jump_statement : GOTO STRING_LITERAL ',' '*' IDENTIFIER",
"jump_statement : GOSUB '*' IDENTIFIER",
"jump_statement : GOSUB STRING_LITERAL ',' '*' IDENTIFIER",
"jump_statement : CONTINUE",
"jump_statement : CONTINUE expression",
"jump_statement : BREAK",
"jump_statement : RETURN",
"jump_statement : RETURN expression",
};

//#line 463 "Parser.y"

        int i = 0;
	// Referencia ao JFlex
	private Yylex lexer;

	/* Interface com o JFlex */
	private int yylex(){
          //System.out.println("ptr: " + stateptr + " ptrmax: " + stateptrmax);
		int yyl_return = -1;
		try {
			yyl_return = lexer.yylex();
		} catch (IOException e) {
			System.err.println("Erro de IO: " + e);
		}
		return yyl_return;
	}

	/* Reporte de erro */
	public void yyerror(String error){
          System.err.println("Error: " + error + " " + lexer.yystate() + " " + lexer.yytext());
        }

        // Interface com o JFlex eh criado no construtor
        public Parser(Reader r, boolean debug){
                yydebug = false;
		lexer = new Yylex(r, this);
	}

	// Main
	public static void main(String[] args){
		try{
                        boolean debug = args[0].contains("test");
                        Parser yyparser = new Parser(new FileReader(args[0]), debug);
			yyparser.yyparse();
			} catch (Exception ex) {
				System.err.println("Error: " + ex);
			}
	}
//#line 2490 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 3:
//#line 37 "Parser.y"
{ if(val_peek(0).sval != null) System.out.println("Get:0:0 " + val_peek(0).sval + ";"); }
break;
case 10:
//#line 53 "Parser.y"
{ yyval = new ParserVal(val_peek(3).sval + " " + val_peek(2).sval + ", " + val_peek(1).sval); }
break;
case 11:
//#line 54 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " hoge, " + val_peek(0).sval); }
break;
case 12:
//#line 55 "Parser.y"
{ yyval = new ParserVal(val_peek(1).sval + " " + val_peek(0).sval); }
break;
case 13:
//#line 56 "Parser.y"
{ yyval = new ParserVal(val_peek(0).sval + " hoge"); }
break;
case 28:
//#line 79 "Parser.y"
{ yyval = new ParserVal("(" + val_peek(1).sval + ")"); }
break;
case 30:
//#line 84 "Parser.y"
{ yyval = new ParserVal(val_peek(3).sval + "[" + val_peek(2).sval + "]"); }
break;
case 31:
//#line 85 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + "()"); }
break;
case 32:
//#line 86 "Parser.y"
{
          switch(val_peek(0).sval.charAt(0)) {
            case '+':
            case '-':
            case '*':
            case '/':
            case '%':
              yyval = new ParserVal(val_peek(1).sval + " " + val_peek(0).sval );
            break;
            default:
              yyval = new ParserVal(val_peek(1).sval + "(" + val_peek(0).sval + ")" );
              break;
          }
 }
break;
case 33:
//#line 100 "Parser.y"
{ yyval = new ParserVal(val_peek(3).sval + "(" + val_peek(1).sval + ")"); }
break;
case 40:
//#line 110 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + ", " + val_peek(0).sval);}
break;
case 41:
//#line 111 "Parser.y"
{ yyval = new ParserVal(val_peek(1).sval + ", null"); }
break;
case 43:
//#line 116 "Parser.y"
{
        if (val_peek(1).sval.charAt(0) == '-') {
          yyval = new ParserVal(val_peek(1).sval + val_peek(0).sval);
        } else {
          yyval = new ParserVal(val_peek(1).sval + " " + val_peek(0).sval);
        }
        }
break;
case 53:
//#line 141 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " * " + val_peek(0).sval); }
break;
case 54:
//#line 142 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " / " + val_peek(0).sval); }
break;
case 55:
//#line 143 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " % " + val_peek(0).sval); }
break;
case 57:
//#line 148 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " + " + val_peek(0).sval); }
break;
case 58:
//#line 149 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " - " + val_peek(0).sval); }
break;
case 63:
//#line 160 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " < " + val_peek(0).sval); }
break;
case 64:
//#line 161 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " > " + val_peek(0).sval); }
break;
case 65:
//#line 162 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " <= " + val_peek(0).sval); }
break;
case 66:
//#line 163 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " >= " + val_peek(0).sval); }
break;
case 68:
//#line 168 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " == " + val_peek(0).sval); }
break;
case 69:
//#line 169 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " != " + val_peek(0).sval); }
break;
case 77:
//#line 189 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " && " + val_peek(0).sval); }
break;
case 79:
//#line 194 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " || " + val_peek(0).sval); }
break;
case 83:
//#line 204 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " " + val_peek(1).sval + " " + val_peek(0).sval); }
break;
case 85:
//#line 209 "Parser.y"
{ yyval = new ParserVal("*="); }
break;
case 86:
//#line 210 "Parser.y"
{ yyval = new ParserVal("/="); }
break;
case 87:
//#line 211 "Parser.y"
{ yyval = new ParserVal("%="); }
break;
case 88:
//#line 212 "Parser.y"
{ yyval = new ParserVal("+="); }
break;
case 89:
//#line 213 "Parser.y"
{ yyval = new ParserVal("-="); }
break;
case 105:
//#line 244 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + ", " + val_peek(0).sval); }
break;
case 107:
//#line 249 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " = " + val_peek(0).sval); }
break;
case 152:
//#line 327 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + " = " + val_peek(0).sval); }
break;
case 157:
//#line 341 "Parser.y"
{ yyval = new ParserVal("(" + val_peek(1).sval + ")"); }
break;
case 158:
//#line 342 "Parser.y"
{ yyval = new ParserVal(val_peek(3).sval + "[" + val_peek(1).sval + "]"); }
break;
case 159:
//#line 343 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + "[]"); }
break;
case 160:
//#line 344 "Parser.y"
{ yyval = new ParserVal(val_peek(3).sval + "(" + val_peek(1).sval + ")"); }
break;
case 161:
//#line 345 "Parser.y"
{ yyval = new ParserVal(val_peek(3).sval + "(" + val_peek(1).sval + ")"); }
break;
case 162:
//#line 346 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + "()"); }
break;
case 166:
//#line 357 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + "..."); }
break;
case 168:
//#line 362 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + ", " + val_peek(0).sval); }
break;
case 173:
//#line 373 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + ", " + val_peek(0).sval); }
break;
case 181:
//#line 390 "Parser.y"
{ yyval = new ParserVal(val_peek(3).sval + "[" + val_peek(1).sval + "]"); }
break;
case 183:
//#line 392 "Parser.y"
{ yyval = new ParserVal("(" + val_peek(1).sval + ")"); }
break;
case 184:
//#line 393 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + "()"); }
break;
case 185:
//#line 394 "Parser.y"
{ yyval = new ParserVal(val_peek(3).sval + "(" + val_peek(1).sval + ")"); }
break;
case 187:
//#line 399 "Parser.y"
{ yyval = new ParserVal(" { " + val_peek(1).sval +" } " ); }
break;
case 188:
//#line 400 "Parser.y"
{ yyval = new ParserVal(" { " + val_peek(2).sval +" } " ); }
break;
case 190:
//#line 405 "Parser.y"
{ yyval = new ParserVal(val_peek(2).sval + ", " + val_peek(0).sval); }
break;
case 191:
//#line 409 "Parser.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 193:
//#line 414 "Parser.y"
{ yyval = val_peek(1); }
break;
case 194:
//#line 415 "Parser.y"
{ yyval = val_peek(1); }
break;
case 195:
//#line 416 "Parser.y"
{ yyval = val_peek(2); }
break;
case 196:
//#line 420 "Parser.y"
{ yyval = new ParserVal(val_peek(0).sval + ";"); }
break;
case 197:
//#line 421 "Parser.y"
{ yyval = new ParserVal(val_peek(1).sval + ";\r\n" + val_peek(0).sval); }
break;
case 198:
//#line 425 "Parser.y"
{ yyval = new ParserVal(val_peek(0).sval + ";"); }
break;
case 199:
//#line 426 "Parser.y"
{ yyval = new ParserVal(val_peek(1).sval + ";\r\n" + val_peek(0).sval); }
break;
case 201:
//#line 431 "Parser.y"
{ yyval = new ParserVal("if (" + val_peek(1).sval + ") { " + val_peek(0).sval + " } "); }
break;
case 202:
//#line 435 "Parser.y"
{
          yyval = new ParserVal("if (" + val_peek(2).sval + ") {\n " + val_peek(0).sval + ";\n}");
        }
break;
case 203:
//#line 438 "Parser.y"
{
          yyval = new ParserVal("if (" + val_peek(4).sval + ") {\n " + val_peek(2).sval + ";\n}\nelse {\n " + val_peek(0).sval + ";\n}");
        }
break;
case 208:
//#line 451 "Parser.y"
{ yyval = new ParserVal("goto_" + val_peek(0).sval + "()"); }
break;
case 209:
//#line 452 "Parser.y"
{ yyval = new ParserVal("goto_button_" + val_peek(0).sval + "(" + val_peek(3).sval + ")"); }
break;
case 210:
//#line 453 "Parser.y"
{ yyval = new ParserVal("gosub_" + val_peek(0).sval + "()"); }
break;
case 211:
//#line 454 "Parser.y"
{ yyval = new ParserVal("gosub_button_" + val_peek(0).sval + "(" + val_peek(3).sval + ")"); }
break;
case 213:
//#line 456 "Parser.y"
{ yyval = new ParserVal("continue; //" + val_peek(0).sval); }
break;
case 216:
//#line 459 "Parser.y"
{ yyval = new ParserVal("return " + val_peek(0).sval); }
break;
//#line 2934 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
