/* The following code was generated by JFlex 1.6.1 */

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>LexicalAnalyzer.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\21\1\22\1\2\22\0\1\3\1\66\1\53"+
    "\1\101\1\0\1\62\1\63\1\50\1\73\1\74\1\60\1\57\1\71"+
    "\1\11\1\52\1\61\1\46\11\4\1\72\1\20\1\56\1\55\1\54"+
    "\1\100\1\0\4\7\1\10\1\13\5\5\1\15\10\5\1\17\2\5"+
    "\1\47\2\5\1\75\1\51\1\76\1\64\1\5\1\0\1\23\1\26"+
    "\1\32\1\37\1\30\1\12\1\42\1\33\1\36\1\5\1\31\1\14"+
    "\1\40\1\34\1\25\1\45\1\5\1\27\1\35\1\24\1\16\1\6"+
    "\1\5\1\41\1\44\1\43\1\67\1\65\1\70\1\77\6\0\1\21"+
    "\u1fa2\0\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\5\1\6\4\5"+
    "\1\1\14\5\1\4\1\1\1\7\1\1\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\0\2\4\2\5\1\36"+
    "\1\37\1\40\3\5\2\0\1\5\1\0\2\41\20\5"+
    "\1\42\1\5\1\43\4\5\5\0\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\21\1\60\1\61\1\17\1\62\1\4\1\0"+
    "\1\4\1\63\3\5\1\64\21\5\1\65\4\5\1\66"+
    "\6\5\1\4\1\67\1\70\1\71\1\5\1\72\1\5"+
    "\1\73\2\5\1\74\6\5\1\75\1\76\3\5\1\77"+
    "\6\5\1\100\1\5\1\101\1\5\1\102\3\5\1\103"+
    "\1\5\1\104\1\105\1\5\1\106\1\107\4\5\1\110"+
    "\3\5\1\111\3\5\1\112\5\5\1\113\1\5\1\114"+
    "\2\5\1\115\1\116\1\117\1\120\1\121\4\5\1\122"+
    "\2\5\1\123\1\124\1\125\1\126\1\127\1\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\204\0\102\0\306\0\u0108\0\u014a"+
    "\0\u018c\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a"+
    "\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a"+
    "\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\102\0\102\0\102\0\u0a0e\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\102\0\102\0\102\0\u0b9a\0\u0bdc\0\u0c1e\0\u0672"+
    "\0\u06f6\0\u0c60\0\u02d6\0\102\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u0108\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\102\0\u13da\0\102\0\102\0\102\0\u141c\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\u145e\0\u14a0\0\102\0\u0108\0\u14e2\0\u1524"+
    "\0\u1566\0\u0108\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902"+
    "\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12"+
    "\0\u0108\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0"+
    "\0\102\0\102\0\102\0\u1d22\0\u0108\0\u1d64\0\u0108\0\u1da6"+
    "\0\u1de8\0\u0108\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74"+
    "\0\u0108\0\u0108\0\u1fb6\0\u1ff8\0\u203a\0\u0108\0\u207c\0\u20be"+
    "\0\u2100\0\u2142\0\u2184\0\u21c6\0\u0108\0\u2208\0\u0108\0\u224a"+
    "\0\u0108\0\u228c\0\u22ce\0\u2310\0\u0108\0\u2352\0\u0108\0\u0108"+
    "\0\u2394\0\u0108\0\u0108\0\u23d6\0\u2418\0\u245a\0\u249c\0\u0108"+
    "\0\u24de\0\u2520\0\u2562\0\u0108\0\u25a4\0\u25e6\0\u2628\0\u0108"+
    "\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u0108\0\u27b4\0\u0108"+
    "\0\u27f6\0\u2838\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u287a"+
    "\0\u28bc\0\u28fe\0\u2940\0\u0108\0\u2982\0\u29c4\0\u0108\0\u0108"+
    "\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\7"+
    "\1\11\1\12\1\7\1\13\1\14\1\15\1\7\1\16"+
    "\1\0\1\5\1\17\1\20\1\7\1\21\1\22\1\23"+
    "\1\7\1\24\1\7\1\25\1\26\1\27\1\30\2\7"+
    "\1\31\2\7\1\32\1\33\1\7\1\34\1\2\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\103\0"+
    "\1\3\104\0\1\6\3\0\1\65\3\0\4\66\10\0"+
    "\1\65\15\0\1\6\3\0\1\67\33\0\5\7\1\0"+
    "\6\7\3\0\25\7\36\0\5\7\1\0\6\7\3\0"+
    "\1\70\1\7\1\71\22\7\43\0\1\72\42\0\1\73"+
    "\1\74\30\0\5\7\1\0\2\7\1\75\3\7\3\0"+
    "\2\7\1\76\22\7\36\0\5\7\1\0\6\7\3\0"+
    "\2\7\1\77\22\7\36\0\5\7\1\0\6\7\3\0"+
    "\25\7\1\100\2\0\1\101\32\0\5\7\1\0\6\7"+
    "\3\0\11\7\1\102\13\7\32\0\1\103\1\104\1\105"+
    "\16\103\2\0\57\103\4\0\5\7\1\0\4\7\1\106"+
    "\1\7\3\0\4\7\1\107\20\7\36\0\5\7\1\0"+
    "\6\7\3\0\21\7\1\110\3\7\36\0\5\7\1\0"+
    "\6\7\3\0\4\7\1\111\10\7\1\112\7\7\36\0"+
    "\5\7\1\0\6\7\3\0\5\7\1\113\17\7\36\0"+
    "\5\7\1\0\2\7\1\114\3\7\3\0\11\7\1\115"+
    "\4\7\1\116\6\7\36\0\5\7\1\0\6\7\3\0"+
    "\2\7\1\117\5\7\1\120\14\7\36\0\5\7\1\0"+
    "\4\7\1\121\1\7\3\0\25\7\36\0\5\7\1\0"+
    "\6\7\3\0\1\7\1\122\6\7\1\123\2\7\1\124"+
    "\6\7\1\125\2\7\36\0\5\7\1\0\1\126\5\7"+
    "\3\0\11\7\1\127\13\7\36\0\5\7\1\0\6\7"+
    "\3\0\2\7\1\130\22\7\36\0\5\7\1\0\6\7"+
    "\3\0\2\7\1\131\22\7\36\0\2\7\1\132\2\7"+
    "\1\0\6\7\3\0\4\7\1\133\1\134\17\7\36\0"+
    "\1\6\3\0\1\65\3\0\4\66\10\0\1\65\10\0"+
    "\1\135\4\0\1\6\1\135\2\0\1\67\27\0\50\136"+
    "\1\0\1\137\30\136\4\0\1\67\41\0\1\67\3\0"+
    "\1\140\27\0\51\101\1\141\1\101\1\142\26\101\54\0"+
    "\1\143\1\144\101\0\1\145\101\0\1\146\1\147\3\0"+
    "\1\52\7\0\1\60\64\0\1\150\1\0\1\151\77\0"+
    "\1\152\101\0\1\153\100\0\1\53\1\154\101\0\1\155"+
    "\5\0\1\156\73\0\1\157\101\0\1\160\7\0\1\161"+
    "\71\0\1\162\100\0\1\61\31\0\1\163\4\0\1\164"+
    "\34\0\1\163\10\0\1\164\36\0\4\66\66\0\1\67"+
    "\3\0\1\65\1\0\4\165\12\0\1\65\15\0\1\67"+
    "\37\0\5\7\1\0\6\7\3\0\4\7\1\166\20\7"+
    "\36\0\5\7\1\0\2\7\1\167\3\7\3\0\13\7"+
    "\1\170\11\7\36\0\5\7\1\0\6\7\3\0\2\7"+
    "\1\171\22\7\36\0\5\7\1\0\6\7\3\0\4\7"+
    "\1\172\20\7\36\0\5\7\1\0\6\7\3\0\11\7"+
    "\1\173\13\7\36\0\5\7\1\0\6\7\3\0\12\7"+
    "\1\174\1\175\11\7\33\0\1\104\104\0\5\7\1\0"+
    "\6\7\3\0\1\7\1\176\23\7\36\0\5\7\1\0"+
    "\6\7\3\0\4\7\1\177\20\7\36\0\5\7\1\0"+
    "\6\7\3\0\22\7\1\200\2\7\36\0\5\7\1\0"+
    "\6\7\3\0\5\7\1\201\17\7\36\0\5\7\1\0"+
    "\6\7\3\0\12\7\1\202\12\7\36\0\5\7\1\0"+
    "\6\7\3\0\1\7\1\203\15\7\1\204\5\7\36\0"+
    "\5\7\1\0\6\7\3\0\12\7\1\205\12\7\36\0"+
    "\5\7\1\0\4\7\1\206\1\7\3\0\25\7\36\0"+
    "\5\7\1\0\6\7\3\0\1\7\1\207\23\7\36\0"+
    "\5\7\1\0\6\7\3\0\11\7\1\210\13\7\36\0"+
    "\5\7\1\0\6\7\3\0\1\211\24\7\36\0\5\7"+
    "\1\0\2\7\1\212\3\7\3\0\25\7\36\0\5\7"+
    "\1\0\6\7\3\0\1\213\3\7\1\214\20\7\36\0"+
    "\5\7\1\0\6\7\3\0\2\7\1\215\22\7\36\0"+
    "\5\7\1\0\6\7\3\0\17\7\1\216\1\217\4\7"+
    "\36\0\5\7\1\0\6\7\3\0\1\7\1\220\23\7"+
    "\36\0\5\7\1\0\6\7\3\0\1\7\1\221\23\7"+
    "\36\0\5\7\1\0\4\7\1\222\1\7\3\0\25\7"+
    "\36\0\5\7\1\0\6\7\3\0\1\7\1\223\10\7"+
    "\1\224\12\7\36\0\5\7\1\0\6\7\3\0\1\225"+
    "\24\7\36\0\5\7\1\0\6\7\3\0\5\7\1\226"+
    "\17\7\36\0\5\7\1\0\6\7\3\0\16\7\1\227"+
    "\6\7\36\0\1\230\2\0\2\230\1\0\2\230\7\0"+
    "\1\230\2\0\1\230\1\0\1\230\1\0\1\230\4\0"+
    "\1\230\6\0\1\230\33\0\50\136\1\165\1\137\31\136"+
    "\2\0\16\136\2\0\57\136\52\0\1\231\27\0\1\101"+
    "\2\0\16\101\2\0\57\101\55\0\1\232\101\0\1\233"+
    "\30\0\1\163\5\0\4\165\30\0\1\163\37\0\1\163"+
    "\41\0\1\163\37\0\5\7\1\0\6\7\3\0\1\234"+
    "\24\7\36\0\5\7\1\0\6\7\3\0\14\7\1\235"+
    "\10\7\36\0\5\7\1\0\6\7\3\0\1\236\24\7"+
    "\36\0\5\7\1\0\6\7\3\0\17\7\1\237\5\7"+
    "\36\0\5\7\1\0\6\7\3\0\13\7\1\240\11\7"+
    "\36\0\5\7\1\0\6\7\3\0\2\7\1\241\22\7"+
    "\36\0\5\7\1\0\6\7\3\0\2\7\1\242\22\7"+
    "\36\0\5\7\1\0\6\7\3\0\1\243\24\7\36\0"+
    "\5\7\1\0\6\7\3\0\5\7\1\244\17\7\36\0"+
    "\5\7\1\0\6\7\3\0\1\245\24\7\36\0\5\7"+
    "\1\0\6\7\3\0\7\7\1\246\15\7\36\0\5\7"+
    "\1\0\4\7\1\247\1\7\3\0\25\7\36\0\5\7"+
    "\1\0\6\7\3\0\13\7\1\250\11\7\36\0\5\7"+
    "\1\0\6\7\3\0\5\7\1\251\17\7\36\0\5\7"+
    "\1\0\6\7\3\0\15\7\1\252\7\7\36\0\5\7"+
    "\1\0\6\7\3\0\5\7\1\253\17\7\36\0\5\7"+
    "\1\0\6\7\3\0\1\7\1\254\10\7\1\255\12\7"+
    "\36\0\5\7\1\0\6\7\3\0\4\7\1\256\20\7"+
    "\36\0\5\7\1\0\2\7\1\257\3\7\3\0\25\7"+
    "\36\0\5\7\1\0\6\7\3\0\1\7\1\260\23\7"+
    "\36\0\5\7\1\0\4\7\1\261\1\7\3\0\25\7"+
    "\36\0\5\7\1\0\6\7\3\0\4\7\1\262\20\7"+
    "\36\0\5\7\1\0\6\7\3\0\11\7\1\263\13\7"+
    "\36\0\5\7\1\0\6\7\3\0\5\7\1\264\17\7"+
    "\36\0\5\7\1\0\6\7\3\0\4\7\1\265\20\7"+
    "\36\0\5\7\1\0\6\7\3\0\3\7\1\266\21\7"+
    "\36\0\5\7\1\0\6\7\3\0\2\7\1\267\22\7"+
    "\36\0\5\7\1\0\4\7\1\270\1\7\3\0\25\7"+
    "\36\0\5\7\1\0\2\7\1\271\3\7\3\0\25\7"+
    "\36\0\5\7\1\0\1\272\5\7\3\0\25\7\36\0"+
    "\5\7\1\0\6\7\3\0\13\7\1\273\11\7\36\0"+
    "\1\230\2\0\2\230\1\0\2\230\4\66\3\0\1\230"+
    "\2\0\1\230\1\0\1\230\1\0\1\230\4\0\1\230"+
    "\6\0\1\230\37\0\5\7\1\0\6\7\3\0\1\7"+
    "\1\274\23\7\36\0\5\7\1\0\6\7\3\0\1\7"+
    "\1\275\23\7\36\0\5\7\1\0\6\7\3\0\17\7"+
    "\1\276\5\7\36\0\5\7\1\0\6\7\3\0\11\7"+
    "\1\277\13\7\36\0\5\7\1\0\6\7\3\0\21\7"+
    "\1\300\3\7\36\0\5\7\1\0\6\7\3\0\14\7"+
    "\1\301\10\7\36\0\5\7\1\0\6\7\3\0\6\7"+
    "\1\302\16\7\36\0\5\7\1\0\6\7\3\0\4\7"+
    "\1\303\20\7\36\0\5\7\1\0\6\7\3\0\4\7"+
    "\1\304\20\7\36\0\5\7\1\0\6\7\3\0\12\7"+
    "\1\305\12\7\36\0\5\7\1\0\6\7\3\0\4\7"+
    "\1\306\20\7\36\0\5\7\1\0\6\7\3\0\13\7"+
    "\1\307\11\7\36\0\5\7\1\0\6\7\3\0\1\7"+
    "\1\310\23\7\36\0\5\7\1\0\6\7\3\0\22\7"+
    "\1\311\2\7\36\0\5\7\1\0\6\7\3\0\13\7"+
    "\1\312\11\7\36\0\5\7\1\0\6\7\3\0\7\7"+
    "\1\313\15\7\36\0\5\7\1\0\6\7\3\0\1\7"+
    "\1\314\23\7\36\0\5\7\1\0\6\7\3\0\5\7"+
    "\1\315\17\7\36\0\5\7\1\0\6\7\3\0\2\7"+
    "\1\316\22\7\36\0\5\7\1\0\2\7\1\317\3\7"+
    "\3\0\25\7\36\0\5\7\1\0\6\7\3\0\3\7"+
    "\1\320\21\7\36\0\5\7\1\0\6\7\3\0\12\7"+
    "\1\321\12\7\36\0\5\7\1\0\6\7\3\0\11\7"+
    "\1\322\13\7\36\0\5\7\1\0\6\7\3\0\13\7"+
    "\1\323\11\7\36\0\5\7\1\0\6\7\3\0\11\7"+
    "\1\324\13\7\36\0\5\7\1\0\6\7\3\0\5\7"+
    "\1\325\17\7\36\0\5\7\1\0\6\7\3\0\11\7"+
    "\1\326\13\7\36\0\5\7\1\0\6\7\3\0\1\7"+
    "\1\327\23\7\36\0\5\7\1\0\6\7\3\0\11\7"+
    "\1\330\13\7\36\0\5\7\1\0\6\7\3\0\11\7"+
    "\1\331\13\7\36\0\5\7\1\0\6\7\3\0\1\7"+
    "\1\332\23\7\36\0\5\7\1\0\6\7\3\0\7\7"+
    "\1\333\15\7\36\0\5\7\1\0\6\7\3\0\1\7"+
    "\1\334\23\7\36\0\5\7\1\0\6\7\3\0\14\7"+
    "\1\335\10\7\36\0\5\7\1\0\1\336\5\7\3\0"+
    "\25\7\36\0\5\7\1\0\6\7\3\0\5\7\1\337"+
    "\17\7\36\0\5\7\1\0\6\7\3\0\1\7\1\340"+
    "\23\7\36\0\5\7\1\0\1\341\5\7\3\0\25\7"+
    "\36\0\5\7\1\0\2\7\1\342\3\7\3\0\25\7"+
    "\36\0\5\7\1\0\6\7\3\0\5\7\1\343\17\7"+
    "\36\0\5\7\1\0\1\344\5\7\3\0\25\7\36\0"+
    "\5\7\1\0\6\7\3\0\5\7\1\345\17\7\36\0"+
    "\5\7\1\0\4\7\1\346\1\7\3\0\25\7\36\0"+
    "\5\7\1\0\6\7\3\0\4\7\1\347\20\7\36\0"+
    "\5\7\1\0\6\7\3\0\4\7\1\350\20\7\36\0"+
    "\5\7\1\0\6\7\3\0\2\7\1\351\22\7\36\0"+
    "\5\7\1\0\6\7\3\0\5\7\1\352\17\7\36\0"+
    "\5\7\1\0\6\7\3\0\14\7\1\353\10\7\36\0"+
    "\5\7\1\0\6\7\3\0\4\7\1\354\20\7\36\0"+
    "\5\7\1\0\6\7\3\0\5\7\1\355\17\7\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10758];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\44\1\3\11\1\1\7\11"+
    "\1\0\4\1\3\11\3\1\2\0\1\1\1\0\1\11"+
    "\30\1\5\0\1\11\1\1\3\11\1\1\13\11\1\1"+
    "\1\0\1\11\43\1\3\11\122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	// Armazena uma referencia para o parser
	private Parser yyparser;

	// Construtor recebendo o parser como parametro adicional
	public Yylex(Reader r, Parser yyparser){
		this(r);
		this.yyparser = yyparser;
	}
                private void count() {
                System.out.println("Get:" + yyline + ":" + yycolumn + " { " + yytext() + " } {" + yystate() + "}");
        }
        private void comment() {}
        public int check_type() { return Parser.IDENTIFIER; }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore bad characters */
            }
          case 90: break;
          case 2: 
            { count(); return Parser.NEWLINE;
            }
          case 91: break;
          case 3: 
            { count();
            }
          case 92: break;
          case 4: 
            { count(); return Parser.CONSTANT;
            }
          case 93: break;
          case 5: 
            { count(); return Parser.IDENTIFIER;
            }
          case 94: break;
          case 6: 
            { count(); return (int) '-';
            }
          case 95: break;
          case 7: 
            { count(); return (int) '.';
            }
          case 96: break;
          case 8: 
            { count(); return (int) '>';
            }
          case 97: break;
          case 9: 
            { count(); return (int) '=';
            }
          case 98: break;
          case 10: 
            { count(); return (int) '<';
            }
          case 99: break;
          case 11: 
            { count(); return (int) '+';
            }
          case 100: break;
          case 12: 
            { count(); return (int) '*';
            }
          case 101: break;
          case 13: 
            { count(); return (int) '/';
            }
          case 102: break;
          case 14: 
            { count(); return (int) '%';
            }
          case 103: break;
          case 15: 
            { count(); return Parser.OR_OP;
            }
          case 104: break;
          case 16: 
            { count(); return (int) '^';
            }
          case 105: break;
          case 17: 
            { count(); return Parser.AND_OP;
            }
          case 106: break;
          case 18: 
            { count(); return (int) '!';
            }
          case 107: break;
          case 19: 
            { count(); return (int) '{';
            }
          case 108: break;
          case 20: 
            { count(); return (int) '}';
            }
          case 109: break;
          case 21: 
            { count(); return (int) ',';
            }
          case 110: break;
          case 22: 
            { count(); return (int) ':';
            }
          case 111: break;
          case 23: 
            { count(); return (int) '(';
            }
          case 112: break;
          case 24: 
            { count(); return (int) ')';
            }
          case 113: break;
          case 25: 
            { count(); return (int) '[';
            }
          case 114: break;
          case 26: 
            { count(); return (int) ']';
            }
          case 115: break;
          case 27: 
            { count(); return (int) '~';
            }
          case 116: break;
          case 28: 
            { count(); return (int) '?';
            }
          case 117: break;
          case 29: 
            { count(); return (int) '#';
            }
          case 118: break;
          case 30: 
            { count(); return Parser.DEC_OP;
            }
          case 119: break;
          case 31: 
            { count(); return Parser.PTR_OP;
            }
          case 120: break;
          case 32: 
            { count(); return Parser.SUB_ASSIGN;
            }
          case 121: break;
          case 33: 
            { 
            }
          case 122: break;
          case 34: 
            { count(); return Parser.IF;
            }
          case 123: break;
          case 35: 
            { count(); return Parser.DO;
            }
          case 124: break;
          case 36: 
            { count(); return Parser.STRING_LITERAL;
            }
          case 125: break;
          case 37: 
            { count(); return Parser.RIGHT_OP;
            }
          case 126: break;
          case 38: 
            { count(); return Parser.GE_OP;
            }
          case 127: break;
          case 39: 
            { count(); return Parser.EQ_OP;
            }
          case 128: break;
          case 40: 
            { count(); return Parser.LE_OP;
            }
          case 129: break;
          case 41: 
            { count(); return Parser.LEFT_OP;
            }
          case 130: break;
          case 42: 
            { count(); return Parser.ADD_ASSIGN;
            }
          case 131: break;
          case 43: 
            { count(); return Parser.INC_OP;
            }
          case 132: break;
          case 44: 
            { count(); return Parser.MUL_ASSIGN;
            }
          case 133: break;
          case 45: 
            { count(); return Parser.DIV_ASSIGN;
            }
          case 134: break;
          case 46: 
            { count(); return Parser.MOD_ASSIGN;
            }
          case 135: break;
          case 47: 
            { count(); return Parser.AND_ASSIGN;
            }
          case 136: break;
          case 48: 
            { count(); return Parser.XOR_ASSIGN;
            }
          case 137: break;
          case 49: 
            { count(); return Parser.OR_ASSIGN;
            }
          case 138: break;
          case 50: 
            { count(); return Parser.NE_OP;
            }
          case 139: break;
          case 51: 
            { count(); return Parser.VAR;
            }
          case 140: break;
          case 52: 
            { count(); return Parser.FOR;
            }
          case 141: break;
          case 53: 
            { count(); return Parser.STR;
            }
          case 142: break;
          case 54: 
            { count(); return Parser.INT;
            }
          case 143: break;
          case 55: 
            { count(); return Parser.ELLIPSIS;
            }
          case 144: break;
          case 56: 
            { count(); return Parser.RIGHT_ASSIGN;
            }
          case 145: break;
          case 57: 
            { count(); return Parser.LEFT_ASSIGN;
            }
          case 146: break;
          case 58: 
            { count(); return Parser.VOID;
            }
          case 147: break;
          case 59: 
            { count(); return Parser.LONG;
            }
          case 148: break;
          case 60: 
            { count(); return Parser.AUTO;
            }
          case 149: break;
          case 61: 
            { count(); return Parser.ELSE;
            }
          case 150: break;
          case 62: 
            { count(); return Parser.ENUM;
            }
          case 151: break;
          case 63: 
            { count(); return Parser.CHAR;
            }
          case 152: break;
          case 64: 
            { count(); return Parser.SPTR;
            }
          case 153: break;
          case 65: 
            { count(); return Parser.GOTO;
            }
          case 154: break;
          case 66: 
            { count(); return Parser.PVAL;
            }
          case 155: break;
          case 67: 
            { count(); return Parser.FLOAT;
            }
          case 156: break;
          case 68: 
            { count(); return Parser.UNION;
            }
          case 157: break;
          case 69: 
            { count(); return Parser.ARRAY;
            }
          case 158: break;
          case 70: 
            { count(); return Parser.BREAK;
            }
          case 159: break;
          case 71: 
            { count(); return Parser.BMSCR;
            }
          case 160: break;
          case 72: 
            { count(); return Parser.CONST;
            }
          case 161: break;
          case 73: 
            { count(); return Parser.SHORT;
            }
          case 162: break;
          case 74: 
            { count(); return Parser.GOSUB;
            }
          case 163: break;
          case 75: 
            { count(); return Parser.RETURN;
            }
          case 164: break;
          case 76: 
            { count(); return Parser.EXTERN;
            }
          case 165: break;
          case 77: 
            { count(); return Parser.STATIC;
            }
          case 166: break;
          case 78: 
            { count(); return Parser.STRUCT;
            }
          case 167: break;
          case 79: 
            { count(); return Parser.SIGNED;
            }
          case 168: break;
          case 80: 
            { count(); return Parser.SIZEOF;
            }
          case 169: break;
          case 81: 
            { count(); return Parser.DOUBLE;
            }
          case 170: break;
          case 82: 
            { count(); return Parser.TYPEDEF;
            }
          case 171: break;
          case 83: 
            { count(); return Parser.NULLPTR;
            }
          case 172: break;
          case 84: 
            { count(); return Parser.PREFSTR;
            }
          case 173: break;
          case 85: 
            { count(); return Parser.PEXINFO;
            }
          case 174: break;
          case 86: 
            { count(); return Parser.VOLATILE;
            }
          case 175: break;
          case 87: 
            { count(); return Parser.UNSIGNED;
            }
          case 176: break;
          case 88: 
            { count(); return Parser.REGISTER;
            }
          case 177: break;
          case 89: 
            { count(); return Parser.CONTINUE;
            }
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
